
STM32_Lab2_Ex2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021dc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080022e8  080022e8  000122e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800230c  0800230c  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  0800230c  0800230c  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800230c  0800230c  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800230c  0800230c  0001230c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002310  08002310  00012310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08002314  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  20000028  0800233c  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  0800233c  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020051  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007cb3  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000168e  00000000  00000000  00027d47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000998  00000000  00000000  000293d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000764  00000000  00000000  00029d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016384  00000000  00000000  0002a4d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009b1a  00000000  00000000  00040858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000822d6  00000000  00000000  0004a372  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002740  00000000  00000000  000cc648  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000ced88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000028 	.word	0x20000028
 8000128:	00000000 	.word	0x00000000
 800012c:	080022d0 	.word	0x080022d0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000002c 	.word	0x2000002c
 8000148:	080022d0 	.word	0x080022d0

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fdae 	bl	8000cb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f84a 	bl	80001ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8d0 	bl	80002fc <MX_GPIO_Init>
  MX_TIM2_Init();
 800015c:	f000 f882 	bl	8000264 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000160:	481f      	ldr	r0, [pc, #124]	; (80001e0 <main+0x94>)
 8000162:	f001 fcf1 	bl	8001b48 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer0(10);
 8000166:	200a      	movs	r0, #10
 8000168:	f000 fc40 	bl	80009ec <setTimer0>
  setTimer1(10);
 800016c:	200a      	movs	r0, #10
 800016e:	f000 fc57 	bl	8000a20 <setTimer1>
  setTimer2(10);
 8000172:	200a      	movs	r0, #10
 8000174:	f000 fc6e 	bl	8000a54 <setTimer2>

  while (1)
  {
	  if (getTimer0Flag())
 8000178:	f000 fcc8 	bl	8000b0c <getTimer0Flag>
 800017c:	4603      	mov	r3, r0
 800017e:	2b00      	cmp	r3, #0
 8000180:	d00b      	beq.n	800019a <main+0x4e>
	  {
		  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000182:	2120      	movs	r1, #32
 8000184:	4817      	ldr	r0, [pc, #92]	; (80001e4 <main+0x98>)
 8000186:	f001 f897 	bl	80012b8 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(DOT_GPIO_Port, DOT_Pin);
 800018a:	2110      	movs	r1, #16
 800018c:	4815      	ldr	r0, [pc, #84]	; (80001e4 <main+0x98>)
 800018e:	f001 f893 	bl	80012b8 <HAL_GPIO_TogglePin>
		  setTimer0(1000);
 8000192:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000196:	f000 fc29 	bl	80009ec <setTimer0>
	  }

	  if (getTimer1Flag())
 800019a:	f000 fcc1 	bl	8000b20 <getTimer1Flag>
 800019e:	4603      	mov	r3, r0
 80001a0:	2b00      	cmp	r3, #0
 80001a2:	d012      	beq.n	80001ca <main+0x7e>
	  {
		  if (index_led >= MAX_LED)
 80001a4:	4b10      	ldr	r3, [pc, #64]	; (80001e8 <main+0x9c>)
 80001a6:	681b      	ldr	r3, [r3, #0]
 80001a8:	2206      	movs	r2, #6
 80001aa:	4293      	cmp	r3, r2
 80001ac:	db02      	blt.n	80001b4 <main+0x68>
		  {
			  index_led = 0;
 80001ae:	4b0e      	ldr	r3, [pc, #56]	; (80001e8 <main+0x9c>)
 80001b0:	2200      	movs	r2, #0
 80001b2:	601a      	str	r2, [r3, #0]
		  }
		  update7SEG(index_led++);
 80001b4:	4b0c      	ldr	r3, [pc, #48]	; (80001e8 <main+0x9c>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	1c5a      	adds	r2, r3, #1
 80001ba:	490b      	ldr	r1, [pc, #44]	; (80001e8 <main+0x9c>)
 80001bc:	600a      	str	r2, [r1, #0]
 80001be:	4618      	mov	r0, r3
 80001c0:	f000 fa8c 	bl	80006dc <update7SEG>
		  setTimer1(200);
 80001c4:	20c8      	movs	r0, #200	; 0xc8
 80001c6:	f000 fc2b 	bl	8000a20 <setTimer1>
	  }

	  if (getTimer2Flag())
 80001ca:	f000 fcb3 	bl	8000b34 <getTimer2Flag>
 80001ce:	4603      	mov	r3, r0
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d0d1      	beq.n	8000178 <main+0x2c>
	  {
		  updateClockBuffer();
 80001d4:	f000 fba0 	bl	8000918 <updateClockBuffer>
		  setTimer2(200);
 80001d8:	20c8      	movs	r0, #200	; 0xc8
 80001da:	f000 fc3b 	bl	8000a54 <setTimer2>
	  if (getTimer0Flag())
 80001de:	e7cb      	b.n	8000178 <main+0x2c>
 80001e0:	20000044 	.word	0x20000044
 80001e4:	40010800 	.word	0x40010800
 80001e8:	2000008c 	.word	0x2000008c

080001ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b090      	sub	sp, #64	; 0x40
 80001f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001f2:	f107 0318 	add.w	r3, r7, #24
 80001f6:	2228      	movs	r2, #40	; 0x28
 80001f8:	2100      	movs	r1, #0
 80001fa:	4618      	mov	r0, r3
 80001fc:	f002 f83c 	bl	8002278 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000200:	1d3b      	adds	r3, r7, #4
 8000202:	2200      	movs	r2, #0
 8000204:	601a      	str	r2, [r3, #0]
 8000206:	605a      	str	r2, [r3, #4]
 8000208:	609a      	str	r2, [r3, #8]
 800020a:	60da      	str	r2, [r3, #12]
 800020c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800020e:	2302      	movs	r3, #2
 8000210:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000212:	2301      	movs	r3, #1
 8000214:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000216:	2310      	movs	r3, #16
 8000218:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800021a:	2300      	movs	r3, #0
 800021c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800021e:	f107 0318 	add.w	r3, r7, #24
 8000222:	4618      	mov	r0, r3
 8000224:	f001 f862 	bl	80012ec <HAL_RCC_OscConfig>
 8000228:	4603      	mov	r3, r0
 800022a:	2b00      	cmp	r3, #0
 800022c:	d001      	beq.n	8000232 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800022e:	f000 fbd7 	bl	80009e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000232:	230f      	movs	r3, #15
 8000234:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000236:	2300      	movs	r3, #0
 8000238:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800023a:	2300      	movs	r3, #0
 800023c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800023e:	2300      	movs	r3, #0
 8000240:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000242:	2300      	movs	r3, #0
 8000244:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000246:	1d3b      	adds	r3, r7, #4
 8000248:	2100      	movs	r1, #0
 800024a:	4618      	mov	r0, r3
 800024c:	f001 fad0 	bl	80017f0 <HAL_RCC_ClockConfig>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d001      	beq.n	800025a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000256:	f000 fbc3 	bl	80009e0 <Error_Handler>
  }
}
 800025a:	bf00      	nop
 800025c:	3740      	adds	r7, #64	; 0x40
 800025e:	46bd      	mov	sp, r7
 8000260:	bd80      	pop	{r7, pc}
	...

08000264 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b086      	sub	sp, #24
 8000268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800026a:	f107 0308 	add.w	r3, r7, #8
 800026e:	2200      	movs	r2, #0
 8000270:	601a      	str	r2, [r3, #0]
 8000272:	605a      	str	r2, [r3, #4]
 8000274:	609a      	str	r2, [r3, #8]
 8000276:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000278:	463b      	mov	r3, r7
 800027a:	2200      	movs	r2, #0
 800027c:	601a      	str	r2, [r3, #0]
 800027e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000280:	4b1d      	ldr	r3, [pc, #116]	; (80002f8 <MX_TIM2_Init+0x94>)
 8000282:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000286:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000288:	4b1b      	ldr	r3, [pc, #108]	; (80002f8 <MX_TIM2_Init+0x94>)
 800028a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800028e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000290:	4b19      	ldr	r3, [pc, #100]	; (80002f8 <MX_TIM2_Init+0x94>)
 8000292:	2200      	movs	r2, #0
 8000294:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000296:	4b18      	ldr	r3, [pc, #96]	; (80002f8 <MX_TIM2_Init+0x94>)
 8000298:	2209      	movs	r2, #9
 800029a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800029c:	4b16      	ldr	r3, [pc, #88]	; (80002f8 <MX_TIM2_Init+0x94>)
 800029e:	2200      	movs	r2, #0
 80002a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002a2:	4b15      	ldr	r3, [pc, #84]	; (80002f8 <MX_TIM2_Init+0x94>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80002a8:	4813      	ldr	r0, [pc, #76]	; (80002f8 <MX_TIM2_Init+0x94>)
 80002aa:	f001 fbfd 	bl	8001aa8 <HAL_TIM_Base_Init>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d001      	beq.n	80002b8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80002b4:	f000 fb94 	bl	80009e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80002be:	f107 0308 	add.w	r3, r7, #8
 80002c2:	4619      	mov	r1, r3
 80002c4:	480c      	ldr	r0, [pc, #48]	; (80002f8 <MX_TIM2_Init+0x94>)
 80002c6:	f001 fd93 	bl	8001df0 <HAL_TIM_ConfigClockSource>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80002d0:	f000 fb86 	bl	80009e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002d4:	2300      	movs	r3, #0
 80002d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002d8:	2300      	movs	r3, #0
 80002da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80002dc:	463b      	mov	r3, r7
 80002de:	4619      	mov	r1, r3
 80002e0:	4805      	ldr	r0, [pc, #20]	; (80002f8 <MX_TIM2_Init+0x94>)
 80002e2:	f001 ff5f 	bl	80021a4 <HAL_TIMEx_MasterConfigSynchronization>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80002ec:	f000 fb78 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80002f0:	bf00      	nop
 80002f2:	3718      	adds	r7, #24
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	20000044 	.word	0x20000044

080002fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b086      	sub	sp, #24
 8000300:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000302:	f107 0308 	add.w	r3, r7, #8
 8000306:	2200      	movs	r2, #0
 8000308:	601a      	str	r2, [r3, #0]
 800030a:	605a      	str	r2, [r3, #4]
 800030c:	609a      	str	r2, [r3, #8]
 800030e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000310:	4b22      	ldr	r3, [pc, #136]	; (800039c <MX_GPIO_Init+0xa0>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	4a21      	ldr	r2, [pc, #132]	; (800039c <MX_GPIO_Init+0xa0>)
 8000316:	f043 0304 	orr.w	r3, r3, #4
 800031a:	6193      	str	r3, [r2, #24]
 800031c:	4b1f      	ldr	r3, [pc, #124]	; (800039c <MX_GPIO_Init+0xa0>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	f003 0304 	and.w	r3, r3, #4
 8000324:	607b      	str	r3, [r7, #4]
 8000326:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000328:	4b1c      	ldr	r3, [pc, #112]	; (800039c <MX_GPIO_Init+0xa0>)
 800032a:	699b      	ldr	r3, [r3, #24]
 800032c:	4a1b      	ldr	r2, [pc, #108]	; (800039c <MX_GPIO_Init+0xa0>)
 800032e:	f043 0308 	orr.w	r3, r3, #8
 8000332:	6193      	str	r3, [r2, #24]
 8000334:	4b19      	ldr	r3, [pc, #100]	; (800039c <MX_GPIO_Init+0xa0>)
 8000336:	699b      	ldr	r3, [r3, #24]
 8000338:	f003 0308 	and.w	r3, r3, #8
 800033c:	603b      	str	r3, [r7, #0]
 800033e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ENM0_Pin|ENM1_Pin|ENM2_Pin|DOT_Pin
 8000340:	2200      	movs	r2, #0
 8000342:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8000346:	4816      	ldr	r0, [pc, #88]	; (80003a0 <MX_GPIO_Init+0xa4>)
 8000348:	f000 ff9e 	bl	8001288 <HAL_GPIO_WritePin>
                          |LED_RED_Pin|EN0_Pin|EN1_Pin|EN2_Pin
                          |EN3_Pin|EN4_Pin|EN5_Pin|ENM3_Pin
                          |ENM4_Pin|ENM5_Pin|ENM6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|ROW2_Pin
 800034c:	2200      	movs	r2, #0
 800034e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000352:	4814      	ldr	r0, [pc, #80]	; (80003a4 <MX_GPIO_Init+0xa8>)
 8000354:	f000 ff98 	bl	8001288 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ENM0_Pin ENM1_Pin ENM2_Pin DOT_Pin
                           LED_RED_Pin EN0_Pin EN1_Pin EN2_Pin
                           EN3_Pin EN4_Pin EN5_Pin ENM3_Pin
                           ENM4_Pin ENM5_Pin ENM6_Pin */
  GPIO_InitStruct.Pin = ENM0_Pin|ENM1_Pin|ENM2_Pin|DOT_Pin
 8000358:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800035c:	60bb      	str	r3, [r7, #8]
                          |LED_RED_Pin|EN0_Pin|EN1_Pin|EN2_Pin
                          |EN3_Pin|EN4_Pin|EN5_Pin|ENM3_Pin
                          |ENM4_Pin|ENM5_Pin|ENM6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800035e:	2301      	movs	r3, #1
 8000360:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000362:	2300      	movs	r3, #0
 8000364:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000366:	2302      	movs	r3, #2
 8000368:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800036a:	f107 0308 	add.w	r3, r7, #8
 800036e:	4619      	mov	r1, r3
 8000370:	480b      	ldr	r0, [pc, #44]	; (80003a0 <MX_GPIO_Init+0xa4>)
 8000372:	f000 fe0d 	bl	8000f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin ROW2_Pin
                           ROW3_Pin ROW4_Pin ROW5_Pin ROW6_Pin
                           ROW7_Pin SEG3_Pin SEG4_Pin SEG5_Pin
                           SEG6_Pin ENM7_Pin ROW0_Pin ROW1_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|ROW2_Pin
 8000376:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800037a:	60bb      	str	r3, [r7, #8]
                          |ROW3_Pin|ROW4_Pin|ROW5_Pin|ROW6_Pin
                          |ROW7_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin
                          |SEG6_Pin|ENM7_Pin|ROW0_Pin|ROW1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800037c:	2301      	movs	r3, #1
 800037e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000380:	2300      	movs	r3, #0
 8000382:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000384:	2302      	movs	r3, #2
 8000386:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000388:	f107 0308 	add.w	r3, r7, #8
 800038c:	4619      	mov	r1, r3
 800038e:	4805      	ldr	r0, [pc, #20]	; (80003a4 <MX_GPIO_Init+0xa8>)
 8000390:	f000 fdfe 	bl	8000f90 <HAL_GPIO_Init>

}
 8000394:	bf00      	nop
 8000396:	3718      	adds	r7, #24
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}
 800039c:	40021000 	.word	0x40021000
 80003a0:	40010800 	.word	0x40010800
 80003a4:	40010c00 	.word	0x40010c00

080003a8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
	timer_run();
 80003b0:	f000 fb6a 	bl	8000a88 <timer_run>
}
 80003b4:	bf00      	nop
 80003b6:	3708      	adds	r7, #8
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}

080003bc <display7SEG>:

void display7SEG(int num)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
	switch (num)
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	2b09      	cmp	r3, #9
 80003c8:	f200 8180 	bhi.w	80006cc <display7SEG+0x310>
 80003cc:	a201      	add	r2, pc, #4	; (adr r2, 80003d4 <display7SEG+0x18>)
 80003ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003d2:	bf00      	nop
 80003d4:	080003fd 	.word	0x080003fd
 80003d8:	08000445 	.word	0x08000445
 80003dc:	0800048d 	.word	0x0800048d
 80003e0:	080004d5 	.word	0x080004d5
 80003e4:	0800051d 	.word	0x0800051d
 80003e8:	08000565 	.word	0x08000565
 80003ec:	080005ad 	.word	0x080005ad
 80003f0:	080005f5 	.word	0x080005f5
 80003f4:	0800063d 	.word	0x0800063d
 80003f8:	08000685 	.word	0x08000685
	{
		case 0:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80003fc:	2200      	movs	r2, #0
 80003fe:	2101      	movs	r1, #1
 8000400:	48b5      	ldr	r0, [pc, #724]	; (80006d8 <display7SEG+0x31c>)
 8000402:	f000 ff41 	bl	8001288 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000406:	2200      	movs	r2, #0
 8000408:	2102      	movs	r1, #2
 800040a:	48b3      	ldr	r0, [pc, #716]	; (80006d8 <display7SEG+0x31c>)
 800040c:	f000 ff3c 	bl	8001288 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000410:	2200      	movs	r2, #0
 8000412:	2104      	movs	r1, #4
 8000414:	48b0      	ldr	r0, [pc, #704]	; (80006d8 <display7SEG+0x31c>)
 8000416:	f000 ff37 	bl	8001288 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800041a:	2200      	movs	r2, #0
 800041c:	2108      	movs	r1, #8
 800041e:	48ae      	ldr	r0, [pc, #696]	; (80006d8 <display7SEG+0x31c>)
 8000420:	f000 ff32 	bl	8001288 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000424:	2200      	movs	r2, #0
 8000426:	2110      	movs	r1, #16
 8000428:	48ab      	ldr	r0, [pc, #684]	; (80006d8 <display7SEG+0x31c>)
 800042a:	f000 ff2d 	bl	8001288 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800042e:	2200      	movs	r2, #0
 8000430:	2120      	movs	r1, #32
 8000432:	48a9      	ldr	r0, [pc, #676]	; (80006d8 <display7SEG+0x31c>)
 8000434:	f000 ff28 	bl	8001288 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000438:	2201      	movs	r2, #1
 800043a:	2140      	movs	r1, #64	; 0x40
 800043c:	48a6      	ldr	r0, [pc, #664]	; (80006d8 <display7SEG+0x31c>)
 800043e:	f000 ff23 	bl	8001288 <HAL_GPIO_WritePin>
			break;
 8000442:	e144      	b.n	80006ce <display7SEG+0x312>
		case 1:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000444:	2201      	movs	r2, #1
 8000446:	2101      	movs	r1, #1
 8000448:	48a3      	ldr	r0, [pc, #652]	; (80006d8 <display7SEG+0x31c>)
 800044a:	f000 ff1d 	bl	8001288 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 800044e:	2200      	movs	r2, #0
 8000450:	2102      	movs	r1, #2
 8000452:	48a1      	ldr	r0, [pc, #644]	; (80006d8 <display7SEG+0x31c>)
 8000454:	f000 ff18 	bl	8001288 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000458:	2200      	movs	r2, #0
 800045a:	2104      	movs	r1, #4
 800045c:	489e      	ldr	r0, [pc, #632]	; (80006d8 <display7SEG+0x31c>)
 800045e:	f000 ff13 	bl	8001288 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8000462:	2201      	movs	r2, #1
 8000464:	2108      	movs	r1, #8
 8000466:	489c      	ldr	r0, [pc, #624]	; (80006d8 <display7SEG+0x31c>)
 8000468:	f000 ff0e 	bl	8001288 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800046c:	2201      	movs	r2, #1
 800046e:	2110      	movs	r1, #16
 8000470:	4899      	ldr	r0, [pc, #612]	; (80006d8 <display7SEG+0x31c>)
 8000472:	f000 ff09 	bl	8001288 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000476:	2201      	movs	r2, #1
 8000478:	2120      	movs	r1, #32
 800047a:	4897      	ldr	r0, [pc, #604]	; (80006d8 <display7SEG+0x31c>)
 800047c:	f000 ff04 	bl	8001288 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000480:	2201      	movs	r2, #1
 8000482:	2140      	movs	r1, #64	; 0x40
 8000484:	4894      	ldr	r0, [pc, #592]	; (80006d8 <display7SEG+0x31c>)
 8000486:	f000 feff 	bl	8001288 <HAL_GPIO_WritePin>
			break;
 800048a:	e120      	b.n	80006ce <display7SEG+0x312>
		case 2:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800048c:	2200      	movs	r2, #0
 800048e:	2101      	movs	r1, #1
 8000490:	4891      	ldr	r0, [pc, #580]	; (80006d8 <display7SEG+0x31c>)
 8000492:	f000 fef9 	bl	8001288 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000496:	2200      	movs	r2, #0
 8000498:	2102      	movs	r1, #2
 800049a:	488f      	ldr	r0, [pc, #572]	; (80006d8 <display7SEG+0x31c>)
 800049c:	f000 fef4 	bl	8001288 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 80004a0:	2201      	movs	r2, #1
 80004a2:	2104      	movs	r1, #4
 80004a4:	488c      	ldr	r0, [pc, #560]	; (80006d8 <display7SEG+0x31c>)
 80004a6:	f000 feef 	bl	8001288 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80004aa:	2200      	movs	r2, #0
 80004ac:	2108      	movs	r1, #8
 80004ae:	488a      	ldr	r0, [pc, #552]	; (80006d8 <display7SEG+0x31c>)
 80004b0:	f000 feea 	bl	8001288 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80004b4:	2200      	movs	r2, #0
 80004b6:	2110      	movs	r1, #16
 80004b8:	4887      	ldr	r0, [pc, #540]	; (80006d8 <display7SEG+0x31c>)
 80004ba:	f000 fee5 	bl	8001288 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80004be:	2201      	movs	r2, #1
 80004c0:	2120      	movs	r1, #32
 80004c2:	4885      	ldr	r0, [pc, #532]	; (80006d8 <display7SEG+0x31c>)
 80004c4:	f000 fee0 	bl	8001288 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80004c8:	2200      	movs	r2, #0
 80004ca:	2140      	movs	r1, #64	; 0x40
 80004cc:	4882      	ldr	r0, [pc, #520]	; (80006d8 <display7SEG+0x31c>)
 80004ce:	f000 fedb 	bl	8001288 <HAL_GPIO_WritePin>
			break;
 80004d2:	e0fc      	b.n	80006ce <display7SEG+0x312>
		  case 3:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80004d4:	2200      	movs	r2, #0
 80004d6:	2101      	movs	r1, #1
 80004d8:	487f      	ldr	r0, [pc, #508]	; (80006d8 <display7SEG+0x31c>)
 80004da:	f000 fed5 	bl	8001288 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80004de:	2200      	movs	r2, #0
 80004e0:	2102      	movs	r1, #2
 80004e2:	487d      	ldr	r0, [pc, #500]	; (80006d8 <display7SEG+0x31c>)
 80004e4:	f000 fed0 	bl	8001288 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80004e8:	2200      	movs	r2, #0
 80004ea:	2104      	movs	r1, #4
 80004ec:	487a      	ldr	r0, [pc, #488]	; (80006d8 <display7SEG+0x31c>)
 80004ee:	f000 fecb 	bl	8001288 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80004f2:	2200      	movs	r2, #0
 80004f4:	2108      	movs	r1, #8
 80004f6:	4878      	ldr	r0, [pc, #480]	; (80006d8 <display7SEG+0x31c>)
 80004f8:	f000 fec6 	bl	8001288 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80004fc:	2201      	movs	r2, #1
 80004fe:	2110      	movs	r1, #16
 8000500:	4875      	ldr	r0, [pc, #468]	; (80006d8 <display7SEG+0x31c>)
 8000502:	f000 fec1 	bl	8001288 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000506:	2201      	movs	r2, #1
 8000508:	2120      	movs	r1, #32
 800050a:	4873      	ldr	r0, [pc, #460]	; (80006d8 <display7SEG+0x31c>)
 800050c:	f000 febc 	bl	8001288 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000510:	2200      	movs	r2, #0
 8000512:	2140      	movs	r1, #64	; 0x40
 8000514:	4870      	ldr	r0, [pc, #448]	; (80006d8 <display7SEG+0x31c>)
 8000516:	f000 feb7 	bl	8001288 <HAL_GPIO_WritePin>
			break;
 800051a:	e0d8      	b.n	80006ce <display7SEG+0x312>
		  case 4:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800051c:	2201      	movs	r2, #1
 800051e:	2101      	movs	r1, #1
 8000520:	486d      	ldr	r0, [pc, #436]	; (80006d8 <display7SEG+0x31c>)
 8000522:	f000 feb1 	bl	8001288 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000526:	2200      	movs	r2, #0
 8000528:	2102      	movs	r1, #2
 800052a:	486b      	ldr	r0, [pc, #428]	; (80006d8 <display7SEG+0x31c>)
 800052c:	f000 feac 	bl	8001288 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000530:	2200      	movs	r2, #0
 8000532:	2104      	movs	r1, #4
 8000534:	4868      	ldr	r0, [pc, #416]	; (80006d8 <display7SEG+0x31c>)
 8000536:	f000 fea7 	bl	8001288 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 800053a:	2201      	movs	r2, #1
 800053c:	2108      	movs	r1, #8
 800053e:	4866      	ldr	r0, [pc, #408]	; (80006d8 <display7SEG+0x31c>)
 8000540:	f000 fea2 	bl	8001288 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000544:	2201      	movs	r2, #1
 8000546:	2110      	movs	r1, #16
 8000548:	4863      	ldr	r0, [pc, #396]	; (80006d8 <display7SEG+0x31c>)
 800054a:	f000 fe9d 	bl	8001288 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800054e:	2200      	movs	r2, #0
 8000550:	2120      	movs	r1, #32
 8000552:	4861      	ldr	r0, [pc, #388]	; (80006d8 <display7SEG+0x31c>)
 8000554:	f000 fe98 	bl	8001288 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000558:	2200      	movs	r2, #0
 800055a:	2140      	movs	r1, #64	; 0x40
 800055c:	485e      	ldr	r0, [pc, #376]	; (80006d8 <display7SEG+0x31c>)
 800055e:	f000 fe93 	bl	8001288 <HAL_GPIO_WritePin>
			break;
 8000562:	e0b4      	b.n	80006ce <display7SEG+0x312>
		  case 5:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000564:	2200      	movs	r2, #0
 8000566:	2101      	movs	r1, #1
 8000568:	485b      	ldr	r0, [pc, #364]	; (80006d8 <display7SEG+0x31c>)
 800056a:	f000 fe8d 	bl	8001288 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 800056e:	2201      	movs	r2, #1
 8000570:	2102      	movs	r1, #2
 8000572:	4859      	ldr	r0, [pc, #356]	; (80006d8 <display7SEG+0x31c>)
 8000574:	f000 fe88 	bl	8001288 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000578:	2200      	movs	r2, #0
 800057a:	2104      	movs	r1, #4
 800057c:	4856      	ldr	r0, [pc, #344]	; (80006d8 <display7SEG+0x31c>)
 800057e:	f000 fe83 	bl	8001288 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000582:	2200      	movs	r2, #0
 8000584:	2108      	movs	r1, #8
 8000586:	4854      	ldr	r0, [pc, #336]	; (80006d8 <display7SEG+0x31c>)
 8000588:	f000 fe7e 	bl	8001288 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800058c:	2201      	movs	r2, #1
 800058e:	2110      	movs	r1, #16
 8000590:	4851      	ldr	r0, [pc, #324]	; (80006d8 <display7SEG+0x31c>)
 8000592:	f000 fe79 	bl	8001288 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	2120      	movs	r1, #32
 800059a:	484f      	ldr	r0, [pc, #316]	; (80006d8 <display7SEG+0x31c>)
 800059c:	f000 fe74 	bl	8001288 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80005a0:	2200      	movs	r2, #0
 80005a2:	2140      	movs	r1, #64	; 0x40
 80005a4:	484c      	ldr	r0, [pc, #304]	; (80006d8 <display7SEG+0x31c>)
 80005a6:	f000 fe6f 	bl	8001288 <HAL_GPIO_WritePin>
			break;
 80005aa:	e090      	b.n	80006ce <display7SEG+0x312>
		  case 6:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80005ac:	2200      	movs	r2, #0
 80005ae:	2101      	movs	r1, #1
 80005b0:	4849      	ldr	r0, [pc, #292]	; (80006d8 <display7SEG+0x31c>)
 80005b2:	f000 fe69 	bl	8001288 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 80005b6:	2201      	movs	r2, #1
 80005b8:	2102      	movs	r1, #2
 80005ba:	4847      	ldr	r0, [pc, #284]	; (80006d8 <display7SEG+0x31c>)
 80005bc:	f000 fe64 	bl	8001288 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80005c0:	2200      	movs	r2, #0
 80005c2:	2104      	movs	r1, #4
 80005c4:	4844      	ldr	r0, [pc, #272]	; (80006d8 <display7SEG+0x31c>)
 80005c6:	f000 fe5f 	bl	8001288 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80005ca:	2200      	movs	r2, #0
 80005cc:	2108      	movs	r1, #8
 80005ce:	4842      	ldr	r0, [pc, #264]	; (80006d8 <display7SEG+0x31c>)
 80005d0:	f000 fe5a 	bl	8001288 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80005d4:	2200      	movs	r2, #0
 80005d6:	2110      	movs	r1, #16
 80005d8:	483f      	ldr	r0, [pc, #252]	; (80006d8 <display7SEG+0x31c>)
 80005da:	f000 fe55 	bl	8001288 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80005de:	2200      	movs	r2, #0
 80005e0:	2120      	movs	r1, #32
 80005e2:	483d      	ldr	r0, [pc, #244]	; (80006d8 <display7SEG+0x31c>)
 80005e4:	f000 fe50 	bl	8001288 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80005e8:	2200      	movs	r2, #0
 80005ea:	2140      	movs	r1, #64	; 0x40
 80005ec:	483a      	ldr	r0, [pc, #232]	; (80006d8 <display7SEG+0x31c>)
 80005ee:	f000 fe4b 	bl	8001288 <HAL_GPIO_WritePin>
			break;
 80005f2:	e06c      	b.n	80006ce <display7SEG+0x312>
		  case 7:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80005f4:	2200      	movs	r2, #0
 80005f6:	2101      	movs	r1, #1
 80005f8:	4837      	ldr	r0, [pc, #220]	; (80006d8 <display7SEG+0x31c>)
 80005fa:	f000 fe45 	bl	8001288 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80005fe:	2200      	movs	r2, #0
 8000600:	2102      	movs	r1, #2
 8000602:	4835      	ldr	r0, [pc, #212]	; (80006d8 <display7SEG+0x31c>)
 8000604:	f000 fe40 	bl	8001288 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000608:	2200      	movs	r2, #0
 800060a:	2104      	movs	r1, #4
 800060c:	4832      	ldr	r0, [pc, #200]	; (80006d8 <display7SEG+0x31c>)
 800060e:	f000 fe3b 	bl	8001288 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8000612:	2201      	movs	r2, #1
 8000614:	2108      	movs	r1, #8
 8000616:	4830      	ldr	r0, [pc, #192]	; (80006d8 <display7SEG+0x31c>)
 8000618:	f000 fe36 	bl	8001288 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800061c:	2201      	movs	r2, #1
 800061e:	2110      	movs	r1, #16
 8000620:	482d      	ldr	r0, [pc, #180]	; (80006d8 <display7SEG+0x31c>)
 8000622:	f000 fe31 	bl	8001288 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000626:	2201      	movs	r2, #1
 8000628:	2120      	movs	r1, #32
 800062a:	482b      	ldr	r0, [pc, #172]	; (80006d8 <display7SEG+0x31c>)
 800062c:	f000 fe2c 	bl	8001288 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000630:	2201      	movs	r2, #1
 8000632:	2140      	movs	r1, #64	; 0x40
 8000634:	4828      	ldr	r0, [pc, #160]	; (80006d8 <display7SEG+0x31c>)
 8000636:	f000 fe27 	bl	8001288 <HAL_GPIO_WritePin>
			break;
 800063a:	e048      	b.n	80006ce <display7SEG+0x312>
		  case 8:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800063c:	2200      	movs	r2, #0
 800063e:	2101      	movs	r1, #1
 8000640:	4825      	ldr	r0, [pc, #148]	; (80006d8 <display7SEG+0x31c>)
 8000642:	f000 fe21 	bl	8001288 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000646:	2200      	movs	r2, #0
 8000648:	2102      	movs	r1, #2
 800064a:	4823      	ldr	r0, [pc, #140]	; (80006d8 <display7SEG+0x31c>)
 800064c:	f000 fe1c 	bl	8001288 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000650:	2200      	movs	r2, #0
 8000652:	2104      	movs	r1, #4
 8000654:	4820      	ldr	r0, [pc, #128]	; (80006d8 <display7SEG+0x31c>)
 8000656:	f000 fe17 	bl	8001288 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800065a:	2200      	movs	r2, #0
 800065c:	2108      	movs	r1, #8
 800065e:	481e      	ldr	r0, [pc, #120]	; (80006d8 <display7SEG+0x31c>)
 8000660:	f000 fe12 	bl	8001288 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000664:	2200      	movs	r2, #0
 8000666:	2110      	movs	r1, #16
 8000668:	481b      	ldr	r0, [pc, #108]	; (80006d8 <display7SEG+0x31c>)
 800066a:	f000 fe0d 	bl	8001288 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800066e:	2200      	movs	r2, #0
 8000670:	2120      	movs	r1, #32
 8000672:	4819      	ldr	r0, [pc, #100]	; (80006d8 <display7SEG+0x31c>)
 8000674:	f000 fe08 	bl	8001288 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000678:	2200      	movs	r2, #0
 800067a:	2140      	movs	r1, #64	; 0x40
 800067c:	4816      	ldr	r0, [pc, #88]	; (80006d8 <display7SEG+0x31c>)
 800067e:	f000 fe03 	bl	8001288 <HAL_GPIO_WritePin>
			break;
 8000682:	e024      	b.n	80006ce <display7SEG+0x312>
		  case 9:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000684:	2200      	movs	r2, #0
 8000686:	2101      	movs	r1, #1
 8000688:	4813      	ldr	r0, [pc, #76]	; (80006d8 <display7SEG+0x31c>)
 800068a:	f000 fdfd 	bl	8001288 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 800068e:	2200      	movs	r2, #0
 8000690:	2102      	movs	r1, #2
 8000692:	4811      	ldr	r0, [pc, #68]	; (80006d8 <display7SEG+0x31c>)
 8000694:	f000 fdf8 	bl	8001288 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000698:	2200      	movs	r2, #0
 800069a:	2104      	movs	r1, #4
 800069c:	480e      	ldr	r0, [pc, #56]	; (80006d8 <display7SEG+0x31c>)
 800069e:	f000 fdf3 	bl	8001288 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2108      	movs	r1, #8
 80006a6:	480c      	ldr	r0, [pc, #48]	; (80006d8 <display7SEG+0x31c>)
 80006a8:	f000 fdee 	bl	8001288 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80006ac:	2201      	movs	r2, #1
 80006ae:	2110      	movs	r1, #16
 80006b0:	4809      	ldr	r0, [pc, #36]	; (80006d8 <display7SEG+0x31c>)
 80006b2:	f000 fde9 	bl	8001288 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2120      	movs	r1, #32
 80006ba:	4807      	ldr	r0, [pc, #28]	; (80006d8 <display7SEG+0x31c>)
 80006bc:	f000 fde4 	bl	8001288 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80006c0:	2200      	movs	r2, #0
 80006c2:	2140      	movs	r1, #64	; 0x40
 80006c4:	4804      	ldr	r0, [pc, #16]	; (80006d8 <display7SEG+0x31c>)
 80006c6:	f000 fddf 	bl	8001288 <HAL_GPIO_WritePin>
			break;
 80006ca:	e000      	b.n	80006ce <display7SEG+0x312>
		  default:
			  break;
 80006cc:	bf00      	nop
	}
}
 80006ce:	bf00      	nop
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40010c00 	.word	0x40010c00

080006dc <update7SEG>:

void update7SEG(int index)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
    switch (index)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	2b05      	cmp	r3, #5
 80006e8:	f200 810c 	bhi.w	8000904 <update7SEG+0x228>
 80006ec:	a201      	add	r2, pc, #4	; (adr r2, 80006f4 <update7SEG+0x18>)
 80006ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f2:	bf00      	nop
 80006f4:	0800070d 	.word	0x0800070d
 80006f8:	08000761 	.word	0x08000761
 80006fc:	080007b5 	.word	0x080007b5
 8000700:	08000809 	.word	0x08000809
 8000704:	0800085d 	.word	0x0800085d
 8000708:	080008b1 	.word	0x080008b1
    {
        case 0:
            HAL_GPIO_WritePin(EN5_GPIO_Port, EN5_Pin, GPIO_PIN_SET);
 800070c:	2201      	movs	r2, #1
 800070e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000712:	487f      	ldr	r0, [pc, #508]	; (8000910 <update7SEG+0x234>)
 8000714:	f000 fdb8 	bl	8001288 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, GPIO_PIN_SET);
 8000718:	2201      	movs	r2, #1
 800071a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800071e:	487c      	ldr	r0, [pc, #496]	; (8000910 <update7SEG+0x234>)
 8000720:	f000 fdb2 	bl	8001288 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000724:	2201      	movs	r2, #1
 8000726:	f44f 7100 	mov.w	r1, #512	; 0x200
 800072a:	4879      	ldr	r0, [pc, #484]	; (8000910 <update7SEG+0x234>)
 800072c:	f000 fdac 	bl	8001288 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000730:	2201      	movs	r2, #1
 8000732:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000736:	4876      	ldr	r0, [pc, #472]	; (8000910 <update7SEG+0x234>)
 8000738:	f000 fda6 	bl	8001288 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 800073c:	2201      	movs	r2, #1
 800073e:	2180      	movs	r1, #128	; 0x80
 8000740:	4873      	ldr	r0, [pc, #460]	; (8000910 <update7SEG+0x234>)
 8000742:	f000 fda1 	bl	8001288 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 8000746:	2200      	movs	r2, #0
 8000748:	2140      	movs	r1, #64	; 0x40
 800074a:	4871      	ldr	r0, [pc, #452]	; (8000910 <update7SEG+0x234>)
 800074c:	f000 fd9c 	bl	8001288 <HAL_GPIO_WritePin>
            display7SEG(led_buffer[index]);
 8000750:	4a70      	ldr	r2, [pc, #448]	; (8000914 <update7SEG+0x238>)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000758:	4618      	mov	r0, r3
 800075a:	f7ff fe2f 	bl	80003bc <display7SEG>
            break;
 800075e:	e0d2      	b.n	8000906 <update7SEG+0x22a>
        case 1:
            HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000760:	2201      	movs	r2, #1
 8000762:	2140      	movs	r1, #64	; 0x40
 8000764:	486a      	ldr	r0, [pc, #424]	; (8000910 <update7SEG+0x234>)
 8000766:	f000 fd8f 	bl	8001288 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN5_GPIO_Port, EN5_Pin, GPIO_PIN_SET);
 800076a:	2201      	movs	r2, #1
 800076c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000770:	4867      	ldr	r0, [pc, #412]	; (8000910 <update7SEG+0x234>)
 8000772:	f000 fd89 	bl	8001288 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, GPIO_PIN_SET);
 8000776:	2201      	movs	r2, #1
 8000778:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800077c:	4864      	ldr	r0, [pc, #400]	; (8000910 <update7SEG+0x234>)
 800077e:	f000 fd83 	bl	8001288 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000782:	2201      	movs	r2, #1
 8000784:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000788:	4861      	ldr	r0, [pc, #388]	; (8000910 <update7SEG+0x234>)
 800078a:	f000 fd7d 	bl	8001288 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 800078e:	2201      	movs	r2, #1
 8000790:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000794:	485e      	ldr	r0, [pc, #376]	; (8000910 <update7SEG+0x234>)
 8000796:	f000 fd77 	bl	8001288 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	2180      	movs	r1, #128	; 0x80
 800079e:	485c      	ldr	r0, [pc, #368]	; (8000910 <update7SEG+0x234>)
 80007a0:	f000 fd72 	bl	8001288 <HAL_GPIO_WritePin>
            display7SEG(led_buffer[index]);
 80007a4:	4a5b      	ldr	r2, [pc, #364]	; (8000914 <update7SEG+0x238>)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff fe05 	bl	80003bc <display7SEG>
            break;
 80007b2:	e0a8      	b.n	8000906 <update7SEG+0x22a>
        case 2:
            HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 80007b4:	2201      	movs	r2, #1
 80007b6:	2180      	movs	r1, #128	; 0x80
 80007b8:	4855      	ldr	r0, [pc, #340]	; (8000910 <update7SEG+0x234>)
 80007ba:	f000 fd65 	bl	8001288 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 80007be:	2201      	movs	r2, #1
 80007c0:	2140      	movs	r1, #64	; 0x40
 80007c2:	4853      	ldr	r0, [pc, #332]	; (8000910 <update7SEG+0x234>)
 80007c4:	f000 fd60 	bl	8001288 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN5_GPIO_Port, EN5_Pin, GPIO_PIN_SET);
 80007c8:	2201      	movs	r2, #1
 80007ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007ce:	4850      	ldr	r0, [pc, #320]	; (8000910 <update7SEG+0x234>)
 80007d0:	f000 fd5a 	bl	8001288 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, GPIO_PIN_SET);
 80007d4:	2201      	movs	r2, #1
 80007d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007da:	484d      	ldr	r0, [pc, #308]	; (8000910 <update7SEG+0x234>)
 80007dc:	f000 fd54 	bl	8001288 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 80007e0:	2201      	movs	r2, #1
 80007e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007e6:	484a      	ldr	r0, [pc, #296]	; (8000910 <update7SEG+0x234>)
 80007e8:	f000 fd4e 	bl	8001288 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 80007ec:	2200      	movs	r2, #0
 80007ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007f2:	4847      	ldr	r0, [pc, #284]	; (8000910 <update7SEG+0x234>)
 80007f4:	f000 fd48 	bl	8001288 <HAL_GPIO_WritePin>
            display7SEG(led_buffer[index]);
 80007f8:	4a46      	ldr	r2, [pc, #280]	; (8000914 <update7SEG+0x238>)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000800:	4618      	mov	r0, r3
 8000802:	f7ff fddb 	bl	80003bc <display7SEG>
            break;
 8000806:	e07e      	b.n	8000906 <update7SEG+0x22a>
        case 3:
            HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000808:	2201      	movs	r2, #1
 800080a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800080e:	4840      	ldr	r0, [pc, #256]	; (8000910 <update7SEG+0x234>)
 8000810:	f000 fd3a 	bl	8001288 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000814:	2201      	movs	r2, #1
 8000816:	2180      	movs	r1, #128	; 0x80
 8000818:	483d      	ldr	r0, [pc, #244]	; (8000910 <update7SEG+0x234>)
 800081a:	f000 fd35 	bl	8001288 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 800081e:	2201      	movs	r2, #1
 8000820:	2140      	movs	r1, #64	; 0x40
 8000822:	483b      	ldr	r0, [pc, #236]	; (8000910 <update7SEG+0x234>)
 8000824:	f000 fd30 	bl	8001288 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN5_GPIO_Port, EN5_Pin, GPIO_PIN_SET);
 8000828:	2201      	movs	r2, #1
 800082a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800082e:	4838      	ldr	r0, [pc, #224]	; (8000910 <update7SEG+0x234>)
 8000830:	f000 fd2a 	bl	8001288 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, GPIO_PIN_SET);
 8000834:	2201      	movs	r2, #1
 8000836:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800083a:	4835      	ldr	r0, [pc, #212]	; (8000910 <update7SEG+0x234>)
 800083c:	f000 fd24 	bl	8001288 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 8000840:	2200      	movs	r2, #0
 8000842:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000846:	4832      	ldr	r0, [pc, #200]	; (8000910 <update7SEG+0x234>)
 8000848:	f000 fd1e 	bl	8001288 <HAL_GPIO_WritePin>
            display7SEG(led_buffer[index]);
 800084c:	4a31      	ldr	r2, [pc, #196]	; (8000914 <update7SEG+0x238>)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff fdb1 	bl	80003bc <display7SEG>
            break;
 800085a:	e054      	b.n	8000906 <update7SEG+0x22a>
        case 4:
            HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 800085c:	2201      	movs	r2, #1
 800085e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000862:	482b      	ldr	r0, [pc, #172]	; (8000910 <update7SEG+0x234>)
 8000864:	f000 fd10 	bl	8001288 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000868:	2201      	movs	r2, #1
 800086a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800086e:	4828      	ldr	r0, [pc, #160]	; (8000910 <update7SEG+0x234>)
 8000870:	f000 fd0a 	bl	8001288 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000874:	2201      	movs	r2, #1
 8000876:	2180      	movs	r1, #128	; 0x80
 8000878:	4825      	ldr	r0, [pc, #148]	; (8000910 <update7SEG+0x234>)
 800087a:	f000 fd05 	bl	8001288 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 800087e:	2201      	movs	r2, #1
 8000880:	2140      	movs	r1, #64	; 0x40
 8000882:	4823      	ldr	r0, [pc, #140]	; (8000910 <update7SEG+0x234>)
 8000884:	f000 fd00 	bl	8001288 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN5_GPIO_Port, EN5_Pin, GPIO_PIN_SET);
 8000888:	2201      	movs	r2, #1
 800088a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800088e:	4820      	ldr	r0, [pc, #128]	; (8000910 <update7SEG+0x234>)
 8000890:	f000 fcfa 	bl	8001288 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, GPIO_PIN_RESET);
 8000894:	2200      	movs	r2, #0
 8000896:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800089a:	481d      	ldr	r0, [pc, #116]	; (8000910 <update7SEG+0x234>)
 800089c:	f000 fcf4 	bl	8001288 <HAL_GPIO_WritePin>
            display7SEG(led_buffer[index]);
 80008a0:	4a1c      	ldr	r2, [pc, #112]	; (8000914 <update7SEG+0x238>)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff fd87 	bl	80003bc <display7SEG>
            break;
 80008ae:	e02a      	b.n	8000906 <update7SEG+0x22a>
        case 5:
            HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, GPIO_PIN_SET);
 80008b0:	2201      	movs	r2, #1
 80008b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008b6:	4816      	ldr	r0, [pc, #88]	; (8000910 <update7SEG+0x234>)
 80008b8:	f000 fce6 	bl	8001288 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 80008bc:	2201      	movs	r2, #1
 80008be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008c2:	4813      	ldr	r0, [pc, #76]	; (8000910 <update7SEG+0x234>)
 80008c4:	f000 fce0 	bl	8001288 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 80008c8:	2201      	movs	r2, #1
 80008ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008ce:	4810      	ldr	r0, [pc, #64]	; (8000910 <update7SEG+0x234>)
 80008d0:	f000 fcda 	bl	8001288 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 80008d4:	2201      	movs	r2, #1
 80008d6:	2180      	movs	r1, #128	; 0x80
 80008d8:	480d      	ldr	r0, [pc, #52]	; (8000910 <update7SEG+0x234>)
 80008da:	f000 fcd5 	bl	8001288 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 80008de:	2201      	movs	r2, #1
 80008e0:	2140      	movs	r1, #64	; 0x40
 80008e2:	480b      	ldr	r0, [pc, #44]	; (8000910 <update7SEG+0x234>)
 80008e4:	f000 fcd0 	bl	8001288 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN5_GPIO_Port, EN5_Pin, GPIO_PIN_RESET);
 80008e8:	2200      	movs	r2, #0
 80008ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008ee:	4808      	ldr	r0, [pc, #32]	; (8000910 <update7SEG+0x234>)
 80008f0:	f000 fcca 	bl	8001288 <HAL_GPIO_WritePin>
            display7SEG(led_buffer[index]);
 80008f4:	4a07      	ldr	r2, [pc, #28]	; (8000914 <update7SEG+0x238>)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008fc:	4618      	mov	r0, r3
 80008fe:	f7ff fd5d 	bl	80003bc <display7SEG>
            break;
 8000902:	e000      	b.n	8000906 <update7SEG+0x22a>
        default:
            break;
 8000904:	bf00      	nop
    }
}
 8000906:	bf00      	nop
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40010800 	.word	0x40010800
 8000914:	20000000 	.word	0x20000000

08000918 <updateClockBuffer>:


void updateClockBuffer()
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
    // Set the time to 12:30
    hour = 12;
 800091c:	4b2b      	ldr	r3, [pc, #172]	; (80009cc <updateClockBuffer+0xb4>)
 800091e:	220c      	movs	r2, #12
 8000920:	601a      	str	r2, [r3, #0]
    minute = 30;
 8000922:	4b2b      	ldr	r3, [pc, #172]	; (80009d0 <updateClockBuffer+0xb8>)
 8000924:	221e      	movs	r2, #30
 8000926:	601a      	str	r2, [r3, #0]
    second = 0;
 8000928:	4b2a      	ldr	r3, [pc, #168]	; (80009d4 <updateClockBuffer+0xbc>)
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]

    led_buffer[4] = second / 10;
 800092e:	4b29      	ldr	r3, [pc, #164]	; (80009d4 <updateClockBuffer+0xbc>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4a29      	ldr	r2, [pc, #164]	; (80009d8 <updateClockBuffer+0xc0>)
 8000934:	fb82 1203 	smull	r1, r2, r2, r3
 8000938:	1092      	asrs	r2, r2, #2
 800093a:	17db      	asrs	r3, r3, #31
 800093c:	1ad3      	subs	r3, r2, r3
 800093e:	4a27      	ldr	r2, [pc, #156]	; (80009dc <updateClockBuffer+0xc4>)
 8000940:	6113      	str	r3, [r2, #16]
    led_buffer[5] = second % 10;
 8000942:	4b24      	ldr	r3, [pc, #144]	; (80009d4 <updateClockBuffer+0xbc>)
 8000944:	6819      	ldr	r1, [r3, #0]
 8000946:	4b24      	ldr	r3, [pc, #144]	; (80009d8 <updateClockBuffer+0xc0>)
 8000948:	fb83 2301 	smull	r2, r3, r3, r1
 800094c:	109a      	asrs	r2, r3, #2
 800094e:	17cb      	asrs	r3, r1, #31
 8000950:	1ad2      	subs	r2, r2, r3
 8000952:	4613      	mov	r3, r2
 8000954:	009b      	lsls	r3, r3, #2
 8000956:	4413      	add	r3, r2
 8000958:	005b      	lsls	r3, r3, #1
 800095a:	1aca      	subs	r2, r1, r3
 800095c:	4b1f      	ldr	r3, [pc, #124]	; (80009dc <updateClockBuffer+0xc4>)
 800095e:	615a      	str	r2, [r3, #20]
    led_buffer[2] = minute / 10;
 8000960:	4b1b      	ldr	r3, [pc, #108]	; (80009d0 <updateClockBuffer+0xb8>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a1c      	ldr	r2, [pc, #112]	; (80009d8 <updateClockBuffer+0xc0>)
 8000966:	fb82 1203 	smull	r1, r2, r2, r3
 800096a:	1092      	asrs	r2, r2, #2
 800096c:	17db      	asrs	r3, r3, #31
 800096e:	1ad3      	subs	r3, r2, r3
 8000970:	4a1a      	ldr	r2, [pc, #104]	; (80009dc <updateClockBuffer+0xc4>)
 8000972:	6093      	str	r3, [r2, #8]
    led_buffer[3] = minute % 10;
 8000974:	4b16      	ldr	r3, [pc, #88]	; (80009d0 <updateClockBuffer+0xb8>)
 8000976:	6819      	ldr	r1, [r3, #0]
 8000978:	4b17      	ldr	r3, [pc, #92]	; (80009d8 <updateClockBuffer+0xc0>)
 800097a:	fb83 2301 	smull	r2, r3, r3, r1
 800097e:	109a      	asrs	r2, r3, #2
 8000980:	17cb      	asrs	r3, r1, #31
 8000982:	1ad2      	subs	r2, r2, r3
 8000984:	4613      	mov	r3, r2
 8000986:	009b      	lsls	r3, r3, #2
 8000988:	4413      	add	r3, r2
 800098a:	005b      	lsls	r3, r3, #1
 800098c:	1aca      	subs	r2, r1, r3
 800098e:	4b13      	ldr	r3, [pc, #76]	; (80009dc <updateClockBuffer+0xc4>)
 8000990:	60da      	str	r2, [r3, #12]
    led_buffer[0] = hour / 10;
 8000992:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <updateClockBuffer+0xb4>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a10      	ldr	r2, [pc, #64]	; (80009d8 <updateClockBuffer+0xc0>)
 8000998:	fb82 1203 	smull	r1, r2, r2, r3
 800099c:	1092      	asrs	r2, r2, #2
 800099e:	17db      	asrs	r3, r3, #31
 80009a0:	1ad3      	subs	r3, r2, r3
 80009a2:	4a0e      	ldr	r2, [pc, #56]	; (80009dc <updateClockBuffer+0xc4>)
 80009a4:	6013      	str	r3, [r2, #0]
    led_buffer[1] = hour % 10;
 80009a6:	4b09      	ldr	r3, [pc, #36]	; (80009cc <updateClockBuffer+0xb4>)
 80009a8:	6819      	ldr	r1, [r3, #0]
 80009aa:	4b0b      	ldr	r3, [pc, #44]	; (80009d8 <updateClockBuffer+0xc0>)
 80009ac:	fb83 2301 	smull	r2, r3, r3, r1
 80009b0:	109a      	asrs	r2, r3, #2
 80009b2:	17cb      	asrs	r3, r1, #31
 80009b4:	1ad2      	subs	r2, r2, r3
 80009b6:	4613      	mov	r3, r2
 80009b8:	009b      	lsls	r3, r3, #2
 80009ba:	4413      	add	r3, r2
 80009bc:	005b      	lsls	r3, r3, #1
 80009be:	1aca      	subs	r2, r1, r3
 80009c0:	4b06      	ldr	r3, [pc, #24]	; (80009dc <updateClockBuffer+0xc4>)
 80009c2:	605a      	str	r2, [r3, #4]
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bc80      	pop	{r7}
 80009ca:	4770      	bx	lr
 80009cc:	20000090 	.word	0x20000090
 80009d0:	20000094 	.word	0x20000094
 80009d4:	20000098 	.word	0x20000098
 80009d8:	66666667 	.word	0x66666667
 80009dc:	20000000 	.word	0x20000000

080009e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e4:	b672      	cpsid	i
}
 80009e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <Error_Handler+0x8>
	...

080009ec <setTimer0>:
int timer2_counter = 0;
int timer2_flag = 0;
int TIMER_CYCLE = 10;

void setTimer0 (int duration)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
	timer0_counter = duration / TIMER_CYCLE;
 80009f4:	4b07      	ldr	r3, [pc, #28]	; (8000a14 <setTimer0+0x28>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	687a      	ldr	r2, [r7, #4]
 80009fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80009fe:	4a06      	ldr	r2, [pc, #24]	; (8000a18 <setTimer0+0x2c>)
 8000a00:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 8000a02:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <setTimer0+0x30>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
}
 8000a08:	bf00      	nop
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bc80      	pop	{r7}
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	20000018 	.word	0x20000018
 8000a18:	2000009c 	.word	0x2000009c
 8000a1c:	200000a0 	.word	0x200000a0

08000a20 <setTimer1>:
void setTimer1 (int duration)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TIMER_CYCLE;
 8000a28:	4b07      	ldr	r3, [pc, #28]	; (8000a48 <setTimer1+0x28>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	687a      	ldr	r2, [r7, #4]
 8000a2e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a32:	4a06      	ldr	r2, [pc, #24]	; (8000a4c <setTimer1+0x2c>)
 8000a34:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000a36:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <setTimer1+0x30>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
}
 8000a3c:	bf00      	nop
 8000a3e:	370c      	adds	r7, #12
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bc80      	pop	{r7}
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	20000018 	.word	0x20000018
 8000a4c:	200000a4 	.word	0x200000a4
 8000a50:	200000a8 	.word	0x200000a8

08000a54 <setTimer2>:
void setTimer2 (int duration)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / TIMER_CYCLE;
 8000a5c:	4b07      	ldr	r3, [pc, #28]	; (8000a7c <setTimer2+0x28>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	687a      	ldr	r2, [r7, #4]
 8000a62:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a66:	4a06      	ldr	r2, [pc, #24]	; (8000a80 <setTimer2+0x2c>)
 8000a68:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8000a6a:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <setTimer2+0x30>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
}
 8000a70:	bf00      	nop
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bc80      	pop	{r7}
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	20000018 	.word	0x20000018
 8000a80:	200000ac 	.word	0x200000ac
 8000a84:	200000b0 	.word	0x200000b0

08000a88 <timer_run>:
void timer_run()
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
	if (timer0_counter > 0)
 8000a8c:	4b19      	ldr	r3, [pc, #100]	; (8000af4 <timer_run+0x6c>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	dd0b      	ble.n	8000aac <timer_run+0x24>
	{
		timer0_counter--;
 8000a94:	4b17      	ldr	r3, [pc, #92]	; (8000af4 <timer_run+0x6c>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	3b01      	subs	r3, #1
 8000a9a:	4a16      	ldr	r2, [pc, #88]	; (8000af4 <timer_run+0x6c>)
 8000a9c:	6013      	str	r3, [r2, #0]
		if (timer0_counter <= 0)
 8000a9e:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <timer_run+0x6c>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	dc02      	bgt.n	8000aac <timer_run+0x24>
		{
			timer0_flag = 1;
 8000aa6:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <timer_run+0x70>)
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer1_counter > 0)
 8000aac:	4b13      	ldr	r3, [pc, #76]	; (8000afc <timer_run+0x74>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	dd0b      	ble.n	8000acc <timer_run+0x44>
	{
		timer1_counter--;
 8000ab4:	4b11      	ldr	r3, [pc, #68]	; (8000afc <timer_run+0x74>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	3b01      	subs	r3, #1
 8000aba:	4a10      	ldr	r2, [pc, #64]	; (8000afc <timer_run+0x74>)
 8000abc:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0)
 8000abe:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <timer_run+0x74>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	dc02      	bgt.n	8000acc <timer_run+0x44>
		{
			timer1_flag = 1;
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <timer_run+0x78>)
 8000ac8:	2201      	movs	r2, #1
 8000aca:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer2_counter > 0)
 8000acc:	4b0d      	ldr	r3, [pc, #52]	; (8000b04 <timer_run+0x7c>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	dd0b      	ble.n	8000aec <timer_run+0x64>
	{
		timer2_counter--;
 8000ad4:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <timer_run+0x7c>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	3b01      	subs	r3, #1
 8000ada:	4a0a      	ldr	r2, [pc, #40]	; (8000b04 <timer_run+0x7c>)
 8000adc:	6013      	str	r3, [r2, #0]
		if (timer2_counter <= 0)
 8000ade:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <timer_run+0x7c>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	dc02      	bgt.n	8000aec <timer_run+0x64>
		{
			timer2_flag = 1;
 8000ae6:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <timer_run+0x80>)
 8000ae8:	2201      	movs	r2, #1
 8000aea:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bc80      	pop	{r7}
 8000af2:	4770      	bx	lr
 8000af4:	2000009c 	.word	0x2000009c
 8000af8:	200000a0 	.word	0x200000a0
 8000afc:	200000a4 	.word	0x200000a4
 8000b00:	200000a8 	.word	0x200000a8
 8000b04:	200000ac 	.word	0x200000ac
 8000b08:	200000b0 	.word	0x200000b0

08000b0c <getTimer0Flag>:

int getTimer0Flag()
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
	return timer0_flag;
 8000b10:	4b02      	ldr	r3, [pc, #8]	; (8000b1c <getTimer0Flag+0x10>)
 8000b12:	681b      	ldr	r3, [r3, #0]
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bc80      	pop	{r7}
 8000b1a:	4770      	bx	lr
 8000b1c:	200000a0 	.word	0x200000a0

08000b20 <getTimer1Flag>:

int getTimer1Flag()
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
	return timer1_flag;
 8000b24:	4b02      	ldr	r3, [pc, #8]	; (8000b30 <getTimer1Flag+0x10>)
 8000b26:	681b      	ldr	r3, [r3, #0]
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bc80      	pop	{r7}
 8000b2e:	4770      	bx	lr
 8000b30:	200000a8 	.word	0x200000a8

08000b34 <getTimer2Flag>:
int getTimer2Flag()
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
	return timer2_flag;
 8000b38:	4b02      	ldr	r3, [pc, #8]	; (8000b44 <getTimer2Flag+0x10>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr
 8000b44:	200000b0 	.word	0x200000b0

08000b48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b4e:	4b15      	ldr	r3, [pc, #84]	; (8000ba4 <HAL_MspInit+0x5c>)
 8000b50:	699b      	ldr	r3, [r3, #24]
 8000b52:	4a14      	ldr	r2, [pc, #80]	; (8000ba4 <HAL_MspInit+0x5c>)
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	6193      	str	r3, [r2, #24]
 8000b5a:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <HAL_MspInit+0x5c>)
 8000b5c:	699b      	ldr	r3, [r3, #24]
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	60bb      	str	r3, [r7, #8]
 8000b64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b66:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <HAL_MspInit+0x5c>)
 8000b68:	69db      	ldr	r3, [r3, #28]
 8000b6a:	4a0e      	ldr	r2, [pc, #56]	; (8000ba4 <HAL_MspInit+0x5c>)
 8000b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b70:	61d3      	str	r3, [r2, #28]
 8000b72:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <HAL_MspInit+0x5c>)
 8000b74:	69db      	ldr	r3, [r3, #28]
 8000b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000b7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ba8 <HAL_MspInit+0x60>)
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	4a04      	ldr	r2, [pc, #16]	; (8000ba8 <HAL_MspInit+0x60>)
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	3714      	adds	r7, #20
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bc80      	pop	{r7}
 8000ba2:	4770      	bx	lr
 8000ba4:	40021000 	.word	0x40021000
 8000ba8:	40010000 	.word	0x40010000

08000bac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bbc:	d113      	bne.n	8000be6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bbe:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <HAL_TIM_Base_MspInit+0x44>)
 8000bc0:	69db      	ldr	r3, [r3, #28]
 8000bc2:	4a0b      	ldr	r2, [pc, #44]	; (8000bf0 <HAL_TIM_Base_MspInit+0x44>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	61d3      	str	r3, [r2, #28]
 8000bca:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <HAL_TIM_Base_MspInit+0x44>)
 8000bcc:	69db      	ldr	r3, [r3, #28]
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2100      	movs	r1, #0
 8000bda:	201c      	movs	r0, #28
 8000bdc:	f000 f9a1 	bl	8000f22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000be0:	201c      	movs	r0, #28
 8000be2:	f000 f9ba 	bl	8000f5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000be6:	bf00      	nop
 8000be8:	3710      	adds	r7, #16
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40021000 	.word	0x40021000

08000bf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <NMI_Handler+0x4>

08000bfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bfe:	e7fe      	b.n	8000bfe <HardFault_Handler+0x4>

08000c00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <MemManage_Handler+0x4>

08000c06 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c0a:	e7fe      	b.n	8000c0a <BusFault_Handler+0x4>

08000c0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c10:	e7fe      	b.n	8000c10 <UsageFault_Handler+0x4>

08000c12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bc80      	pop	{r7}
 8000c1c:	4770      	bx	lr

08000c1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bc80      	pop	{r7}
 8000c28:	4770      	bx	lr

08000c2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bc80      	pop	{r7}
 8000c34:	4770      	bx	lr

08000c36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c3a:	f000 f87f 	bl	8000d3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
	...

08000c44 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c48:	4802      	ldr	r0, [pc, #8]	; (8000c54 <TIM2_IRQHandler+0x10>)
 8000c4a:	f000 ffc9 	bl	8001be0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20000044 	.word	0x20000044

08000c58 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bc80      	pop	{r7}
 8000c62:	4770      	bx	lr

08000c64 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c64:	f7ff fff8 	bl	8000c58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c68:	480b      	ldr	r0, [pc, #44]	; (8000c98 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c6a:	490c      	ldr	r1, [pc, #48]	; (8000c9c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c6c:	4a0c      	ldr	r2, [pc, #48]	; (8000ca0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c70:	e002      	b.n	8000c78 <LoopCopyDataInit>

08000c72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c76:	3304      	adds	r3, #4

08000c78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c7c:	d3f9      	bcc.n	8000c72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c7e:	4a09      	ldr	r2, [pc, #36]	; (8000ca4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c80:	4c09      	ldr	r4, [pc, #36]	; (8000ca8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c84:	e001      	b.n	8000c8a <LoopFillZerobss>

08000c86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c88:	3204      	adds	r2, #4

08000c8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c8c:	d3fb      	bcc.n	8000c86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c8e:	f001 fafb 	bl	8002288 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c92:	f7ff fa5b 	bl	800014c <main>
  bx lr
 8000c96:	4770      	bx	lr
  ldr r0, =_sdata
 8000c98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c9c:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8000ca0:	08002314 	.word	0x08002314
  ldr r2, =_sbss
 8000ca4:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8000ca8:	200000b8 	.word	0x200000b8

08000cac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cac:	e7fe      	b.n	8000cac <ADC1_2_IRQHandler>
	...

08000cb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cb4:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <HAL_Init+0x28>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a07      	ldr	r2, [pc, #28]	; (8000cd8 <HAL_Init+0x28>)
 8000cba:	f043 0310 	orr.w	r3, r3, #16
 8000cbe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc0:	2003      	movs	r0, #3
 8000cc2:	f000 f923 	bl	8000f0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cc6:	200f      	movs	r0, #15
 8000cc8:	f000 f808 	bl	8000cdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ccc:	f7ff ff3c 	bl	8000b48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40022000 	.word	0x40022000

08000cdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ce4:	4b12      	ldr	r3, [pc, #72]	; (8000d30 <HAL_InitTick+0x54>)
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <HAL_InitTick+0x58>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	4619      	mov	r1, r3
 8000cee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f000 f93b 	bl	8000f76 <HAL_SYSTICK_Config>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	e00e      	b.n	8000d28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2b0f      	cmp	r3, #15
 8000d0e:	d80a      	bhi.n	8000d26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d10:	2200      	movs	r2, #0
 8000d12:	6879      	ldr	r1, [r7, #4]
 8000d14:	f04f 30ff 	mov.w	r0, #4294967295
 8000d18:	f000 f903 	bl	8000f22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d1c:	4a06      	ldr	r2, [pc, #24]	; (8000d38 <HAL_InitTick+0x5c>)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d22:	2300      	movs	r3, #0
 8000d24:	e000      	b.n	8000d28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	2000001c 	.word	0x2000001c
 8000d34:	20000024 	.word	0x20000024
 8000d38:	20000020 	.word	0x20000020

08000d3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d40:	4b05      	ldr	r3, [pc, #20]	; (8000d58 <HAL_IncTick+0x1c>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	461a      	mov	r2, r3
 8000d46:	4b05      	ldr	r3, [pc, #20]	; (8000d5c <HAL_IncTick+0x20>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	4a03      	ldr	r2, [pc, #12]	; (8000d5c <HAL_IncTick+0x20>)
 8000d4e:	6013      	str	r3, [r2, #0]
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bc80      	pop	{r7}
 8000d56:	4770      	bx	lr
 8000d58:	20000024 	.word	0x20000024
 8000d5c:	200000b4 	.word	0x200000b4

08000d60 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  return uwTick;
 8000d64:	4b02      	ldr	r3, [pc, #8]	; (8000d70 <HAL_GetTick+0x10>)
 8000d66:	681b      	ldr	r3, [r3, #0]
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bc80      	pop	{r7}
 8000d6e:	4770      	bx	lr
 8000d70:	200000b4 	.word	0x200000b4

08000d74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f003 0307 	and.w	r3, r3, #7
 8000d82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d84:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d8a:	68ba      	ldr	r2, [r7, #8]
 8000d8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d90:	4013      	ands	r3, r2
 8000d92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000da0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000da6:	4a04      	ldr	r2, [pc, #16]	; (8000db8 <__NVIC_SetPriorityGrouping+0x44>)
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	60d3      	str	r3, [r2, #12]
}
 8000dac:	bf00      	nop
 8000dae:	3714      	adds	r7, #20
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bc80      	pop	{r7}
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dc0:	4b04      	ldr	r3, [pc, #16]	; (8000dd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	0a1b      	lsrs	r3, r3, #8
 8000dc6:	f003 0307 	and.w	r3, r3, #7
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bc80      	pop	{r7}
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	db0b      	blt.n	8000e02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	f003 021f 	and.w	r2, r3, #31
 8000df0:	4906      	ldr	r1, [pc, #24]	; (8000e0c <__NVIC_EnableIRQ+0x34>)
 8000df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df6:	095b      	lsrs	r3, r3, #5
 8000df8:	2001      	movs	r0, #1
 8000dfa:	fa00 f202 	lsl.w	r2, r0, r2
 8000dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e02:	bf00      	nop
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bc80      	pop	{r7}
 8000e0a:	4770      	bx	lr
 8000e0c:	e000e100 	.word	0xe000e100

08000e10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	6039      	str	r1, [r7, #0]
 8000e1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	db0a      	blt.n	8000e3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	b2da      	uxtb	r2, r3
 8000e28:	490c      	ldr	r1, [pc, #48]	; (8000e5c <__NVIC_SetPriority+0x4c>)
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	0112      	lsls	r2, r2, #4
 8000e30:	b2d2      	uxtb	r2, r2
 8000e32:	440b      	add	r3, r1
 8000e34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e38:	e00a      	b.n	8000e50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	b2da      	uxtb	r2, r3
 8000e3e:	4908      	ldr	r1, [pc, #32]	; (8000e60 <__NVIC_SetPriority+0x50>)
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	f003 030f 	and.w	r3, r3, #15
 8000e46:	3b04      	subs	r3, #4
 8000e48:	0112      	lsls	r2, r2, #4
 8000e4a:	b2d2      	uxtb	r2, r2
 8000e4c:	440b      	add	r3, r1
 8000e4e:	761a      	strb	r2, [r3, #24]
}
 8000e50:	bf00      	nop
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bc80      	pop	{r7}
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	e000e100 	.word	0xe000e100
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b089      	sub	sp, #36	; 0x24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	f1c3 0307 	rsb	r3, r3, #7
 8000e7e:	2b04      	cmp	r3, #4
 8000e80:	bf28      	it	cs
 8000e82:	2304      	movcs	r3, #4
 8000e84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	3304      	adds	r3, #4
 8000e8a:	2b06      	cmp	r3, #6
 8000e8c:	d902      	bls.n	8000e94 <NVIC_EncodePriority+0x30>
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	3b03      	subs	r3, #3
 8000e92:	e000      	b.n	8000e96 <NVIC_EncodePriority+0x32>
 8000e94:	2300      	movs	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e98:	f04f 32ff 	mov.w	r2, #4294967295
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	43da      	mvns	r2, r3
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	401a      	ands	r2, r3
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eac:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb6:	43d9      	mvns	r1, r3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ebc:	4313      	orrs	r3, r2
         );
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3724      	adds	r7, #36	; 0x24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bc80      	pop	{r7}
 8000ec6:	4770      	bx	lr

08000ec8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ed8:	d301      	bcc.n	8000ede <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eda:	2301      	movs	r3, #1
 8000edc:	e00f      	b.n	8000efe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ede:	4a0a      	ldr	r2, [pc, #40]	; (8000f08 <SysTick_Config+0x40>)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ee6:	210f      	movs	r1, #15
 8000ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8000eec:	f7ff ff90 	bl	8000e10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ef0:	4b05      	ldr	r3, [pc, #20]	; (8000f08 <SysTick_Config+0x40>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ef6:	4b04      	ldr	r3, [pc, #16]	; (8000f08 <SysTick_Config+0x40>)
 8000ef8:	2207      	movs	r2, #7
 8000efa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000efc:	2300      	movs	r3, #0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	e000e010 	.word	0xe000e010

08000f0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f7ff ff2d 	bl	8000d74 <__NVIC_SetPriorityGrouping>
}
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b086      	sub	sp, #24
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	4603      	mov	r3, r0
 8000f2a:	60b9      	str	r1, [r7, #8]
 8000f2c:	607a      	str	r2, [r7, #4]
 8000f2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f34:	f7ff ff42 	bl	8000dbc <__NVIC_GetPriorityGrouping>
 8000f38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f3a:	687a      	ldr	r2, [r7, #4]
 8000f3c:	68b9      	ldr	r1, [r7, #8]
 8000f3e:	6978      	ldr	r0, [r7, #20]
 8000f40:	f7ff ff90 	bl	8000e64 <NVIC_EncodePriority>
 8000f44:	4602      	mov	r2, r0
 8000f46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f4a:	4611      	mov	r1, r2
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff ff5f 	bl	8000e10 <__NVIC_SetPriority>
}
 8000f52:	bf00      	nop
 8000f54:	3718      	adds	r7, #24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b082      	sub	sp, #8
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	4603      	mov	r3, r0
 8000f62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff ff35 	bl	8000dd8 <__NVIC_EnableIRQ>
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b082      	sub	sp, #8
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f7ff ffa2 	bl	8000ec8 <SysTick_Config>
 8000f84:	4603      	mov	r3, r0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
	...

08000f90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b08b      	sub	sp, #44	; 0x2c
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fa2:	e161      	b.n	8001268 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	69fa      	ldr	r2, [r7, #28]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	f040 8150 	bne.w	8001262 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	4a97      	ldr	r2, [pc, #604]	; (8001224 <HAL_GPIO_Init+0x294>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d05e      	beq.n	800108a <HAL_GPIO_Init+0xfa>
 8000fcc:	4a95      	ldr	r2, [pc, #596]	; (8001224 <HAL_GPIO_Init+0x294>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d875      	bhi.n	80010be <HAL_GPIO_Init+0x12e>
 8000fd2:	4a95      	ldr	r2, [pc, #596]	; (8001228 <HAL_GPIO_Init+0x298>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d058      	beq.n	800108a <HAL_GPIO_Init+0xfa>
 8000fd8:	4a93      	ldr	r2, [pc, #588]	; (8001228 <HAL_GPIO_Init+0x298>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d86f      	bhi.n	80010be <HAL_GPIO_Init+0x12e>
 8000fde:	4a93      	ldr	r2, [pc, #588]	; (800122c <HAL_GPIO_Init+0x29c>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d052      	beq.n	800108a <HAL_GPIO_Init+0xfa>
 8000fe4:	4a91      	ldr	r2, [pc, #580]	; (800122c <HAL_GPIO_Init+0x29c>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d869      	bhi.n	80010be <HAL_GPIO_Init+0x12e>
 8000fea:	4a91      	ldr	r2, [pc, #580]	; (8001230 <HAL_GPIO_Init+0x2a0>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d04c      	beq.n	800108a <HAL_GPIO_Init+0xfa>
 8000ff0:	4a8f      	ldr	r2, [pc, #572]	; (8001230 <HAL_GPIO_Init+0x2a0>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d863      	bhi.n	80010be <HAL_GPIO_Init+0x12e>
 8000ff6:	4a8f      	ldr	r2, [pc, #572]	; (8001234 <HAL_GPIO_Init+0x2a4>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d046      	beq.n	800108a <HAL_GPIO_Init+0xfa>
 8000ffc:	4a8d      	ldr	r2, [pc, #564]	; (8001234 <HAL_GPIO_Init+0x2a4>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d85d      	bhi.n	80010be <HAL_GPIO_Init+0x12e>
 8001002:	2b12      	cmp	r3, #18
 8001004:	d82a      	bhi.n	800105c <HAL_GPIO_Init+0xcc>
 8001006:	2b12      	cmp	r3, #18
 8001008:	d859      	bhi.n	80010be <HAL_GPIO_Init+0x12e>
 800100a:	a201      	add	r2, pc, #4	; (adr r2, 8001010 <HAL_GPIO_Init+0x80>)
 800100c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001010:	0800108b 	.word	0x0800108b
 8001014:	08001065 	.word	0x08001065
 8001018:	08001077 	.word	0x08001077
 800101c:	080010b9 	.word	0x080010b9
 8001020:	080010bf 	.word	0x080010bf
 8001024:	080010bf 	.word	0x080010bf
 8001028:	080010bf 	.word	0x080010bf
 800102c:	080010bf 	.word	0x080010bf
 8001030:	080010bf 	.word	0x080010bf
 8001034:	080010bf 	.word	0x080010bf
 8001038:	080010bf 	.word	0x080010bf
 800103c:	080010bf 	.word	0x080010bf
 8001040:	080010bf 	.word	0x080010bf
 8001044:	080010bf 	.word	0x080010bf
 8001048:	080010bf 	.word	0x080010bf
 800104c:	080010bf 	.word	0x080010bf
 8001050:	080010bf 	.word	0x080010bf
 8001054:	0800106d 	.word	0x0800106d
 8001058:	08001081 	.word	0x08001081
 800105c:	4a76      	ldr	r2, [pc, #472]	; (8001238 <HAL_GPIO_Init+0x2a8>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d013      	beq.n	800108a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001062:	e02c      	b.n	80010be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	623b      	str	r3, [r7, #32]
          break;
 800106a:	e029      	b.n	80010c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	3304      	adds	r3, #4
 8001072:	623b      	str	r3, [r7, #32]
          break;
 8001074:	e024      	b.n	80010c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	68db      	ldr	r3, [r3, #12]
 800107a:	3308      	adds	r3, #8
 800107c:	623b      	str	r3, [r7, #32]
          break;
 800107e:	e01f      	b.n	80010c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	330c      	adds	r3, #12
 8001086:	623b      	str	r3, [r7, #32]
          break;
 8001088:	e01a      	b.n	80010c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d102      	bne.n	8001098 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001092:	2304      	movs	r3, #4
 8001094:	623b      	str	r3, [r7, #32]
          break;
 8001096:	e013      	b.n	80010c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	2b01      	cmp	r3, #1
 800109e:	d105      	bne.n	80010ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010a0:	2308      	movs	r3, #8
 80010a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	69fa      	ldr	r2, [r7, #28]
 80010a8:	611a      	str	r2, [r3, #16]
          break;
 80010aa:	e009      	b.n	80010c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010ac:	2308      	movs	r3, #8
 80010ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	69fa      	ldr	r2, [r7, #28]
 80010b4:	615a      	str	r2, [r3, #20]
          break;
 80010b6:	e003      	b.n	80010c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010b8:	2300      	movs	r3, #0
 80010ba:	623b      	str	r3, [r7, #32]
          break;
 80010bc:	e000      	b.n	80010c0 <HAL_GPIO_Init+0x130>
          break;
 80010be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010c0:	69bb      	ldr	r3, [r7, #24]
 80010c2:	2bff      	cmp	r3, #255	; 0xff
 80010c4:	d801      	bhi.n	80010ca <HAL_GPIO_Init+0x13a>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	e001      	b.n	80010ce <HAL_GPIO_Init+0x13e>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	3304      	adds	r3, #4
 80010ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	2bff      	cmp	r3, #255	; 0xff
 80010d4:	d802      	bhi.n	80010dc <HAL_GPIO_Init+0x14c>
 80010d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	e002      	b.n	80010e2 <HAL_GPIO_Init+0x152>
 80010dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010de:	3b08      	subs	r3, #8
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	210f      	movs	r1, #15
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	fa01 f303 	lsl.w	r3, r1, r3
 80010f0:	43db      	mvns	r3, r3
 80010f2:	401a      	ands	r2, r3
 80010f4:	6a39      	ldr	r1, [r7, #32]
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	fa01 f303 	lsl.w	r3, r1, r3
 80010fc:	431a      	orrs	r2, r3
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800110a:	2b00      	cmp	r3, #0
 800110c:	f000 80a9 	beq.w	8001262 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001110:	4b4a      	ldr	r3, [pc, #296]	; (800123c <HAL_GPIO_Init+0x2ac>)
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	4a49      	ldr	r2, [pc, #292]	; (800123c <HAL_GPIO_Init+0x2ac>)
 8001116:	f043 0301 	orr.w	r3, r3, #1
 800111a:	6193      	str	r3, [r2, #24]
 800111c:	4b47      	ldr	r3, [pc, #284]	; (800123c <HAL_GPIO_Init+0x2ac>)
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	f003 0301 	and.w	r3, r3, #1
 8001124:	60bb      	str	r3, [r7, #8]
 8001126:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001128:	4a45      	ldr	r2, [pc, #276]	; (8001240 <HAL_GPIO_Init+0x2b0>)
 800112a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112c:	089b      	lsrs	r3, r3, #2
 800112e:	3302      	adds	r3, #2
 8001130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001134:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001138:	f003 0303 	and.w	r3, r3, #3
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	220f      	movs	r2, #15
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	43db      	mvns	r3, r3
 8001146:	68fa      	ldr	r2, [r7, #12]
 8001148:	4013      	ands	r3, r2
 800114a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4a3d      	ldr	r2, [pc, #244]	; (8001244 <HAL_GPIO_Init+0x2b4>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d00d      	beq.n	8001170 <HAL_GPIO_Init+0x1e0>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4a3c      	ldr	r2, [pc, #240]	; (8001248 <HAL_GPIO_Init+0x2b8>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d007      	beq.n	800116c <HAL_GPIO_Init+0x1dc>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4a3b      	ldr	r2, [pc, #236]	; (800124c <HAL_GPIO_Init+0x2bc>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d101      	bne.n	8001168 <HAL_GPIO_Init+0x1d8>
 8001164:	2302      	movs	r3, #2
 8001166:	e004      	b.n	8001172 <HAL_GPIO_Init+0x1e2>
 8001168:	2303      	movs	r3, #3
 800116a:	e002      	b.n	8001172 <HAL_GPIO_Init+0x1e2>
 800116c:	2301      	movs	r3, #1
 800116e:	e000      	b.n	8001172 <HAL_GPIO_Init+0x1e2>
 8001170:	2300      	movs	r3, #0
 8001172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001174:	f002 0203 	and.w	r2, r2, #3
 8001178:	0092      	lsls	r2, r2, #2
 800117a:	4093      	lsls	r3, r2
 800117c:	68fa      	ldr	r2, [r7, #12]
 800117e:	4313      	orrs	r3, r2
 8001180:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001182:	492f      	ldr	r1, [pc, #188]	; (8001240 <HAL_GPIO_Init+0x2b0>)
 8001184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001186:	089b      	lsrs	r3, r3, #2
 8001188:	3302      	adds	r3, #2
 800118a:	68fa      	ldr	r2, [r7, #12]
 800118c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001198:	2b00      	cmp	r3, #0
 800119a:	d006      	beq.n	80011aa <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800119c:	4b2c      	ldr	r3, [pc, #176]	; (8001250 <HAL_GPIO_Init+0x2c0>)
 800119e:	689a      	ldr	r2, [r3, #8]
 80011a0:	492b      	ldr	r1, [pc, #172]	; (8001250 <HAL_GPIO_Init+0x2c0>)
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	608b      	str	r3, [r1, #8]
 80011a8:	e006      	b.n	80011b8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011aa:	4b29      	ldr	r3, [pc, #164]	; (8001250 <HAL_GPIO_Init+0x2c0>)
 80011ac:	689a      	ldr	r2, [r3, #8]
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	43db      	mvns	r3, r3
 80011b2:	4927      	ldr	r1, [pc, #156]	; (8001250 <HAL_GPIO_Init+0x2c0>)
 80011b4:	4013      	ands	r3, r2
 80011b6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d006      	beq.n	80011d2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011c4:	4b22      	ldr	r3, [pc, #136]	; (8001250 <HAL_GPIO_Init+0x2c0>)
 80011c6:	68da      	ldr	r2, [r3, #12]
 80011c8:	4921      	ldr	r1, [pc, #132]	; (8001250 <HAL_GPIO_Init+0x2c0>)
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	60cb      	str	r3, [r1, #12]
 80011d0:	e006      	b.n	80011e0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011d2:	4b1f      	ldr	r3, [pc, #124]	; (8001250 <HAL_GPIO_Init+0x2c0>)
 80011d4:	68da      	ldr	r2, [r3, #12]
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	43db      	mvns	r3, r3
 80011da:	491d      	ldr	r1, [pc, #116]	; (8001250 <HAL_GPIO_Init+0x2c0>)
 80011dc:	4013      	ands	r3, r2
 80011de:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d006      	beq.n	80011fa <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011ec:	4b18      	ldr	r3, [pc, #96]	; (8001250 <HAL_GPIO_Init+0x2c0>)
 80011ee:	685a      	ldr	r2, [r3, #4]
 80011f0:	4917      	ldr	r1, [pc, #92]	; (8001250 <HAL_GPIO_Init+0x2c0>)
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	604b      	str	r3, [r1, #4]
 80011f8:	e006      	b.n	8001208 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011fa:	4b15      	ldr	r3, [pc, #84]	; (8001250 <HAL_GPIO_Init+0x2c0>)
 80011fc:	685a      	ldr	r2, [r3, #4]
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	43db      	mvns	r3, r3
 8001202:	4913      	ldr	r1, [pc, #76]	; (8001250 <HAL_GPIO_Init+0x2c0>)
 8001204:	4013      	ands	r3, r2
 8001206:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001210:	2b00      	cmp	r3, #0
 8001212:	d01f      	beq.n	8001254 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001214:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <HAL_GPIO_Init+0x2c0>)
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	490d      	ldr	r1, [pc, #52]	; (8001250 <HAL_GPIO_Init+0x2c0>)
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	4313      	orrs	r3, r2
 800121e:	600b      	str	r3, [r1, #0]
 8001220:	e01f      	b.n	8001262 <HAL_GPIO_Init+0x2d2>
 8001222:	bf00      	nop
 8001224:	10320000 	.word	0x10320000
 8001228:	10310000 	.word	0x10310000
 800122c:	10220000 	.word	0x10220000
 8001230:	10210000 	.word	0x10210000
 8001234:	10120000 	.word	0x10120000
 8001238:	10110000 	.word	0x10110000
 800123c:	40021000 	.word	0x40021000
 8001240:	40010000 	.word	0x40010000
 8001244:	40010800 	.word	0x40010800
 8001248:	40010c00 	.word	0x40010c00
 800124c:	40011000 	.word	0x40011000
 8001250:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001254:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <HAL_GPIO_Init+0x2f4>)
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	43db      	mvns	r3, r3
 800125c:	4909      	ldr	r1, [pc, #36]	; (8001284 <HAL_GPIO_Init+0x2f4>)
 800125e:	4013      	ands	r3, r2
 8001260:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001264:	3301      	adds	r3, #1
 8001266:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126e:	fa22 f303 	lsr.w	r3, r2, r3
 8001272:	2b00      	cmp	r3, #0
 8001274:	f47f ae96 	bne.w	8000fa4 <HAL_GPIO_Init+0x14>
  }
}
 8001278:	bf00      	nop
 800127a:	bf00      	nop
 800127c:	372c      	adds	r7, #44	; 0x2c
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr
 8001284:	40010400 	.word	0x40010400

08001288 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	460b      	mov	r3, r1
 8001292:	807b      	strh	r3, [r7, #2]
 8001294:	4613      	mov	r3, r2
 8001296:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001298:	787b      	ldrb	r3, [r7, #1]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d003      	beq.n	80012a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800129e:	887a      	ldrh	r2, [r7, #2]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80012a4:	e003      	b.n	80012ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012a6:	887b      	ldrh	r3, [r7, #2]
 80012a8:	041a      	lsls	r2, r3, #16
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	611a      	str	r2, [r3, #16]
}
 80012ae:	bf00      	nop
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bc80      	pop	{r7}
 80012b6:	4770      	bx	lr

080012b8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	460b      	mov	r3, r1
 80012c2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012ca:	887a      	ldrh	r2, [r7, #2]
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	4013      	ands	r3, r2
 80012d0:	041a      	lsls	r2, r3, #16
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	43d9      	mvns	r1, r3
 80012d6:	887b      	ldrh	r3, [r7, #2]
 80012d8:	400b      	ands	r3, r1
 80012da:	431a      	orrs	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	611a      	str	r2, [r3, #16]
}
 80012e0:	bf00      	nop
 80012e2:	3714      	adds	r7, #20
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bc80      	pop	{r7}
 80012e8:	4770      	bx	lr
	...

080012ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d101      	bne.n	80012fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e272      	b.n	80017e4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	2b00      	cmp	r3, #0
 8001308:	f000 8087 	beq.w	800141a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800130c:	4b92      	ldr	r3, [pc, #584]	; (8001558 <HAL_RCC_OscConfig+0x26c>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f003 030c 	and.w	r3, r3, #12
 8001314:	2b04      	cmp	r3, #4
 8001316:	d00c      	beq.n	8001332 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001318:	4b8f      	ldr	r3, [pc, #572]	; (8001558 <HAL_RCC_OscConfig+0x26c>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f003 030c 	and.w	r3, r3, #12
 8001320:	2b08      	cmp	r3, #8
 8001322:	d112      	bne.n	800134a <HAL_RCC_OscConfig+0x5e>
 8001324:	4b8c      	ldr	r3, [pc, #560]	; (8001558 <HAL_RCC_OscConfig+0x26c>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800132c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001330:	d10b      	bne.n	800134a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001332:	4b89      	ldr	r3, [pc, #548]	; (8001558 <HAL_RCC_OscConfig+0x26c>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d06c      	beq.n	8001418 <HAL_RCC_OscConfig+0x12c>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d168      	bne.n	8001418 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e24c      	b.n	80017e4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001352:	d106      	bne.n	8001362 <HAL_RCC_OscConfig+0x76>
 8001354:	4b80      	ldr	r3, [pc, #512]	; (8001558 <HAL_RCC_OscConfig+0x26c>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a7f      	ldr	r2, [pc, #508]	; (8001558 <HAL_RCC_OscConfig+0x26c>)
 800135a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800135e:	6013      	str	r3, [r2, #0]
 8001360:	e02e      	b.n	80013c0 <HAL_RCC_OscConfig+0xd4>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d10c      	bne.n	8001384 <HAL_RCC_OscConfig+0x98>
 800136a:	4b7b      	ldr	r3, [pc, #492]	; (8001558 <HAL_RCC_OscConfig+0x26c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a7a      	ldr	r2, [pc, #488]	; (8001558 <HAL_RCC_OscConfig+0x26c>)
 8001370:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001374:	6013      	str	r3, [r2, #0]
 8001376:	4b78      	ldr	r3, [pc, #480]	; (8001558 <HAL_RCC_OscConfig+0x26c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a77      	ldr	r2, [pc, #476]	; (8001558 <HAL_RCC_OscConfig+0x26c>)
 800137c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001380:	6013      	str	r3, [r2, #0]
 8001382:	e01d      	b.n	80013c0 <HAL_RCC_OscConfig+0xd4>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800138c:	d10c      	bne.n	80013a8 <HAL_RCC_OscConfig+0xbc>
 800138e:	4b72      	ldr	r3, [pc, #456]	; (8001558 <HAL_RCC_OscConfig+0x26c>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a71      	ldr	r2, [pc, #452]	; (8001558 <HAL_RCC_OscConfig+0x26c>)
 8001394:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001398:	6013      	str	r3, [r2, #0]
 800139a:	4b6f      	ldr	r3, [pc, #444]	; (8001558 <HAL_RCC_OscConfig+0x26c>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a6e      	ldr	r2, [pc, #440]	; (8001558 <HAL_RCC_OscConfig+0x26c>)
 80013a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013a4:	6013      	str	r3, [r2, #0]
 80013a6:	e00b      	b.n	80013c0 <HAL_RCC_OscConfig+0xd4>
 80013a8:	4b6b      	ldr	r3, [pc, #428]	; (8001558 <HAL_RCC_OscConfig+0x26c>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a6a      	ldr	r2, [pc, #424]	; (8001558 <HAL_RCC_OscConfig+0x26c>)
 80013ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013b2:	6013      	str	r3, [r2, #0]
 80013b4:	4b68      	ldr	r3, [pc, #416]	; (8001558 <HAL_RCC_OscConfig+0x26c>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a67      	ldr	r2, [pc, #412]	; (8001558 <HAL_RCC_OscConfig+0x26c>)
 80013ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d013      	beq.n	80013f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c8:	f7ff fcca 	bl	8000d60 <HAL_GetTick>
 80013cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ce:	e008      	b.n	80013e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013d0:	f7ff fcc6 	bl	8000d60 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b64      	cmp	r3, #100	; 0x64
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e200      	b.n	80017e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013e2:	4b5d      	ldr	r3, [pc, #372]	; (8001558 <HAL_RCC_OscConfig+0x26c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d0f0      	beq.n	80013d0 <HAL_RCC_OscConfig+0xe4>
 80013ee:	e014      	b.n	800141a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f0:	f7ff fcb6 	bl	8000d60 <HAL_GetTick>
 80013f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013f6:	e008      	b.n	800140a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013f8:	f7ff fcb2 	bl	8000d60 <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	2b64      	cmp	r3, #100	; 0x64
 8001404:	d901      	bls.n	800140a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e1ec      	b.n	80017e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800140a:	4b53      	ldr	r3, [pc, #332]	; (8001558 <HAL_RCC_OscConfig+0x26c>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1f0      	bne.n	80013f8 <HAL_RCC_OscConfig+0x10c>
 8001416:	e000      	b.n	800141a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001418:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	2b00      	cmp	r3, #0
 8001424:	d063      	beq.n	80014ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001426:	4b4c      	ldr	r3, [pc, #304]	; (8001558 <HAL_RCC_OscConfig+0x26c>)
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f003 030c 	and.w	r3, r3, #12
 800142e:	2b00      	cmp	r3, #0
 8001430:	d00b      	beq.n	800144a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001432:	4b49      	ldr	r3, [pc, #292]	; (8001558 <HAL_RCC_OscConfig+0x26c>)
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f003 030c 	and.w	r3, r3, #12
 800143a:	2b08      	cmp	r3, #8
 800143c:	d11c      	bne.n	8001478 <HAL_RCC_OscConfig+0x18c>
 800143e:	4b46      	ldr	r3, [pc, #280]	; (8001558 <HAL_RCC_OscConfig+0x26c>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d116      	bne.n	8001478 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800144a:	4b43      	ldr	r3, [pc, #268]	; (8001558 <HAL_RCC_OscConfig+0x26c>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	2b00      	cmp	r3, #0
 8001454:	d005      	beq.n	8001462 <HAL_RCC_OscConfig+0x176>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	691b      	ldr	r3, [r3, #16]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d001      	beq.n	8001462 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e1c0      	b.n	80017e4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001462:	4b3d      	ldr	r3, [pc, #244]	; (8001558 <HAL_RCC_OscConfig+0x26c>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	695b      	ldr	r3, [r3, #20]
 800146e:	00db      	lsls	r3, r3, #3
 8001470:	4939      	ldr	r1, [pc, #228]	; (8001558 <HAL_RCC_OscConfig+0x26c>)
 8001472:	4313      	orrs	r3, r2
 8001474:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001476:	e03a      	b.n	80014ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	691b      	ldr	r3, [r3, #16]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d020      	beq.n	80014c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001480:	4b36      	ldr	r3, [pc, #216]	; (800155c <HAL_RCC_OscConfig+0x270>)
 8001482:	2201      	movs	r2, #1
 8001484:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001486:	f7ff fc6b 	bl	8000d60 <HAL_GetTick>
 800148a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800148c:	e008      	b.n	80014a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800148e:	f7ff fc67 	bl	8000d60 <HAL_GetTick>
 8001492:	4602      	mov	r2, r0
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	2b02      	cmp	r3, #2
 800149a:	d901      	bls.n	80014a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800149c:	2303      	movs	r3, #3
 800149e:	e1a1      	b.n	80017e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014a0:	4b2d      	ldr	r3, [pc, #180]	; (8001558 <HAL_RCC_OscConfig+0x26c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0302 	and.w	r3, r3, #2
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d0f0      	beq.n	800148e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ac:	4b2a      	ldr	r3, [pc, #168]	; (8001558 <HAL_RCC_OscConfig+0x26c>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	695b      	ldr	r3, [r3, #20]
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	4927      	ldr	r1, [pc, #156]	; (8001558 <HAL_RCC_OscConfig+0x26c>)
 80014bc:	4313      	orrs	r3, r2
 80014be:	600b      	str	r3, [r1, #0]
 80014c0:	e015      	b.n	80014ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014c2:	4b26      	ldr	r3, [pc, #152]	; (800155c <HAL_RCC_OscConfig+0x270>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c8:	f7ff fc4a 	bl	8000d60 <HAL_GetTick>
 80014cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ce:	e008      	b.n	80014e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014d0:	f7ff fc46 	bl	8000d60 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e180      	b.n	80017e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014e2:	4b1d      	ldr	r3, [pc, #116]	; (8001558 <HAL_RCC_OscConfig+0x26c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d1f0      	bne.n	80014d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0308 	and.w	r3, r3, #8
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d03a      	beq.n	8001570 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d019      	beq.n	8001536 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001502:	4b17      	ldr	r3, [pc, #92]	; (8001560 <HAL_RCC_OscConfig+0x274>)
 8001504:	2201      	movs	r2, #1
 8001506:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001508:	f7ff fc2a 	bl	8000d60 <HAL_GetTick>
 800150c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800150e:	e008      	b.n	8001522 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001510:	f7ff fc26 	bl	8000d60 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b02      	cmp	r3, #2
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e160      	b.n	80017e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001522:	4b0d      	ldr	r3, [pc, #52]	; (8001558 <HAL_RCC_OscConfig+0x26c>)
 8001524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	2b00      	cmp	r3, #0
 800152c:	d0f0      	beq.n	8001510 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800152e:	2001      	movs	r0, #1
 8001530:	f000 fa9c 	bl	8001a6c <RCC_Delay>
 8001534:	e01c      	b.n	8001570 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001536:	4b0a      	ldr	r3, [pc, #40]	; (8001560 <HAL_RCC_OscConfig+0x274>)
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800153c:	f7ff fc10 	bl	8000d60 <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001542:	e00f      	b.n	8001564 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001544:	f7ff fc0c 	bl	8000d60 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b02      	cmp	r3, #2
 8001550:	d908      	bls.n	8001564 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e146      	b.n	80017e4 <HAL_RCC_OscConfig+0x4f8>
 8001556:	bf00      	nop
 8001558:	40021000 	.word	0x40021000
 800155c:	42420000 	.word	0x42420000
 8001560:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001564:	4b92      	ldr	r3, [pc, #584]	; (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 8001566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001568:	f003 0302 	and.w	r3, r3, #2
 800156c:	2b00      	cmp	r3, #0
 800156e:	d1e9      	bne.n	8001544 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0304 	and.w	r3, r3, #4
 8001578:	2b00      	cmp	r3, #0
 800157a:	f000 80a6 	beq.w	80016ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800157e:	2300      	movs	r3, #0
 8001580:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001582:	4b8b      	ldr	r3, [pc, #556]	; (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 8001584:	69db      	ldr	r3, [r3, #28]
 8001586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d10d      	bne.n	80015aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800158e:	4b88      	ldr	r3, [pc, #544]	; (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 8001590:	69db      	ldr	r3, [r3, #28]
 8001592:	4a87      	ldr	r2, [pc, #540]	; (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 8001594:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001598:	61d3      	str	r3, [r2, #28]
 800159a:	4b85      	ldr	r3, [pc, #532]	; (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 800159c:	69db      	ldr	r3, [r3, #28]
 800159e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a2:	60bb      	str	r3, [r7, #8]
 80015a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015a6:	2301      	movs	r3, #1
 80015a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015aa:	4b82      	ldr	r3, [pc, #520]	; (80017b4 <HAL_RCC_OscConfig+0x4c8>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d118      	bne.n	80015e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015b6:	4b7f      	ldr	r3, [pc, #508]	; (80017b4 <HAL_RCC_OscConfig+0x4c8>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a7e      	ldr	r2, [pc, #504]	; (80017b4 <HAL_RCC_OscConfig+0x4c8>)
 80015bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015c2:	f7ff fbcd 	bl	8000d60 <HAL_GetTick>
 80015c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c8:	e008      	b.n	80015dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015ca:	f7ff fbc9 	bl	8000d60 <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b64      	cmp	r3, #100	; 0x64
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e103      	b.n	80017e4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015dc:	4b75      	ldr	r3, [pc, #468]	; (80017b4 <HAL_RCC_OscConfig+0x4c8>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d0f0      	beq.n	80015ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d106      	bne.n	80015fe <HAL_RCC_OscConfig+0x312>
 80015f0:	4b6f      	ldr	r3, [pc, #444]	; (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 80015f2:	6a1b      	ldr	r3, [r3, #32]
 80015f4:	4a6e      	ldr	r2, [pc, #440]	; (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 80015f6:	f043 0301 	orr.w	r3, r3, #1
 80015fa:	6213      	str	r3, [r2, #32]
 80015fc:	e02d      	b.n	800165a <HAL_RCC_OscConfig+0x36e>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d10c      	bne.n	8001620 <HAL_RCC_OscConfig+0x334>
 8001606:	4b6a      	ldr	r3, [pc, #424]	; (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 8001608:	6a1b      	ldr	r3, [r3, #32]
 800160a:	4a69      	ldr	r2, [pc, #420]	; (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 800160c:	f023 0301 	bic.w	r3, r3, #1
 8001610:	6213      	str	r3, [r2, #32]
 8001612:	4b67      	ldr	r3, [pc, #412]	; (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 8001614:	6a1b      	ldr	r3, [r3, #32]
 8001616:	4a66      	ldr	r2, [pc, #408]	; (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 8001618:	f023 0304 	bic.w	r3, r3, #4
 800161c:	6213      	str	r3, [r2, #32]
 800161e:	e01c      	b.n	800165a <HAL_RCC_OscConfig+0x36e>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	2b05      	cmp	r3, #5
 8001626:	d10c      	bne.n	8001642 <HAL_RCC_OscConfig+0x356>
 8001628:	4b61      	ldr	r3, [pc, #388]	; (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 800162a:	6a1b      	ldr	r3, [r3, #32]
 800162c:	4a60      	ldr	r2, [pc, #384]	; (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 800162e:	f043 0304 	orr.w	r3, r3, #4
 8001632:	6213      	str	r3, [r2, #32]
 8001634:	4b5e      	ldr	r3, [pc, #376]	; (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 8001636:	6a1b      	ldr	r3, [r3, #32]
 8001638:	4a5d      	ldr	r2, [pc, #372]	; (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 800163a:	f043 0301 	orr.w	r3, r3, #1
 800163e:	6213      	str	r3, [r2, #32]
 8001640:	e00b      	b.n	800165a <HAL_RCC_OscConfig+0x36e>
 8001642:	4b5b      	ldr	r3, [pc, #364]	; (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 8001644:	6a1b      	ldr	r3, [r3, #32]
 8001646:	4a5a      	ldr	r2, [pc, #360]	; (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 8001648:	f023 0301 	bic.w	r3, r3, #1
 800164c:	6213      	str	r3, [r2, #32]
 800164e:	4b58      	ldr	r3, [pc, #352]	; (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 8001650:	6a1b      	ldr	r3, [r3, #32]
 8001652:	4a57      	ldr	r2, [pc, #348]	; (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 8001654:	f023 0304 	bic.w	r3, r3, #4
 8001658:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d015      	beq.n	800168e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001662:	f7ff fb7d 	bl	8000d60 <HAL_GetTick>
 8001666:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001668:	e00a      	b.n	8001680 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800166a:	f7ff fb79 	bl	8000d60 <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	f241 3288 	movw	r2, #5000	; 0x1388
 8001678:	4293      	cmp	r3, r2
 800167a:	d901      	bls.n	8001680 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e0b1      	b.n	80017e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001680:	4b4b      	ldr	r3, [pc, #300]	; (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 8001682:	6a1b      	ldr	r3, [r3, #32]
 8001684:	f003 0302 	and.w	r3, r3, #2
 8001688:	2b00      	cmp	r3, #0
 800168a:	d0ee      	beq.n	800166a <HAL_RCC_OscConfig+0x37e>
 800168c:	e014      	b.n	80016b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800168e:	f7ff fb67 	bl	8000d60 <HAL_GetTick>
 8001692:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001694:	e00a      	b.n	80016ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001696:	f7ff fb63 	bl	8000d60 <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d901      	bls.n	80016ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e09b      	b.n	80017e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016ac:	4b40      	ldr	r3, [pc, #256]	; (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 80016ae:	6a1b      	ldr	r3, [r3, #32]
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d1ee      	bne.n	8001696 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80016b8:	7dfb      	ldrb	r3, [r7, #23]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d105      	bne.n	80016ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016be:	4b3c      	ldr	r3, [pc, #240]	; (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 80016c0:	69db      	ldr	r3, [r3, #28]
 80016c2:	4a3b      	ldr	r2, [pc, #236]	; (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 80016c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	69db      	ldr	r3, [r3, #28]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	f000 8087 	beq.w	80017e2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016d4:	4b36      	ldr	r3, [pc, #216]	; (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f003 030c 	and.w	r3, r3, #12
 80016dc:	2b08      	cmp	r3, #8
 80016de:	d061      	beq.n	80017a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	69db      	ldr	r3, [r3, #28]
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d146      	bne.n	8001776 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016e8:	4b33      	ldr	r3, [pc, #204]	; (80017b8 <HAL_RCC_OscConfig+0x4cc>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ee:	f7ff fb37 	bl	8000d60 <HAL_GetTick>
 80016f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016f4:	e008      	b.n	8001708 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016f6:	f7ff fb33 	bl	8000d60 <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d901      	bls.n	8001708 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e06d      	b.n	80017e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001708:	4b29      	ldr	r3, [pc, #164]	; (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d1f0      	bne.n	80016f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6a1b      	ldr	r3, [r3, #32]
 8001718:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800171c:	d108      	bne.n	8001730 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800171e:	4b24      	ldr	r3, [pc, #144]	; (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	4921      	ldr	r1, [pc, #132]	; (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 800172c:	4313      	orrs	r3, r2
 800172e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001730:	4b1f      	ldr	r3, [pc, #124]	; (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a19      	ldr	r1, [r3, #32]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001740:	430b      	orrs	r3, r1
 8001742:	491b      	ldr	r1, [pc, #108]	; (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 8001744:	4313      	orrs	r3, r2
 8001746:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001748:	4b1b      	ldr	r3, [pc, #108]	; (80017b8 <HAL_RCC_OscConfig+0x4cc>)
 800174a:	2201      	movs	r2, #1
 800174c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800174e:	f7ff fb07 	bl	8000d60 <HAL_GetTick>
 8001752:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001754:	e008      	b.n	8001768 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001756:	f7ff fb03 	bl	8000d60 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	2b02      	cmp	r3, #2
 8001762:	d901      	bls.n	8001768 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e03d      	b.n	80017e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001768:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d0f0      	beq.n	8001756 <HAL_RCC_OscConfig+0x46a>
 8001774:	e035      	b.n	80017e2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001776:	4b10      	ldr	r3, [pc, #64]	; (80017b8 <HAL_RCC_OscConfig+0x4cc>)
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800177c:	f7ff faf0 	bl	8000d60 <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001782:	e008      	b.n	8001796 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001784:	f7ff faec 	bl	8000d60 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b02      	cmp	r3, #2
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e026      	b.n	80017e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001796:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d1f0      	bne.n	8001784 <HAL_RCC_OscConfig+0x498>
 80017a2:	e01e      	b.n	80017e2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	69db      	ldr	r3, [r3, #28]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d107      	bne.n	80017bc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e019      	b.n	80017e4 <HAL_RCC_OscConfig+0x4f8>
 80017b0:	40021000 	.word	0x40021000
 80017b4:	40007000 	.word	0x40007000
 80017b8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017bc:	4b0b      	ldr	r3, [pc, #44]	; (80017ec <HAL_RCC_OscConfig+0x500>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6a1b      	ldr	r3, [r3, #32]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d106      	bne.n	80017de <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017da:	429a      	cmp	r2, r3
 80017dc:	d001      	beq.n	80017e2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e000      	b.n	80017e4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80017e2:	2300      	movs	r3, #0
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3718      	adds	r7, #24
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	40021000 	.word	0x40021000

080017f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d101      	bne.n	8001804 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e0d0      	b.n	80019a6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001804:	4b6a      	ldr	r3, [pc, #424]	; (80019b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0307 	and.w	r3, r3, #7
 800180c:	683a      	ldr	r2, [r7, #0]
 800180e:	429a      	cmp	r2, r3
 8001810:	d910      	bls.n	8001834 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001812:	4b67      	ldr	r3, [pc, #412]	; (80019b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f023 0207 	bic.w	r2, r3, #7
 800181a:	4965      	ldr	r1, [pc, #404]	; (80019b0 <HAL_RCC_ClockConfig+0x1c0>)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	4313      	orrs	r3, r2
 8001820:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001822:	4b63      	ldr	r3, [pc, #396]	; (80019b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0307 	and.w	r3, r3, #7
 800182a:	683a      	ldr	r2, [r7, #0]
 800182c:	429a      	cmp	r2, r3
 800182e:	d001      	beq.n	8001834 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e0b8      	b.n	80019a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0302 	and.w	r3, r3, #2
 800183c:	2b00      	cmp	r3, #0
 800183e:	d020      	beq.n	8001882 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0304 	and.w	r3, r3, #4
 8001848:	2b00      	cmp	r3, #0
 800184a:	d005      	beq.n	8001858 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800184c:	4b59      	ldr	r3, [pc, #356]	; (80019b4 <HAL_RCC_ClockConfig+0x1c4>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	4a58      	ldr	r2, [pc, #352]	; (80019b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001852:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001856:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0308 	and.w	r3, r3, #8
 8001860:	2b00      	cmp	r3, #0
 8001862:	d005      	beq.n	8001870 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001864:	4b53      	ldr	r3, [pc, #332]	; (80019b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	4a52      	ldr	r2, [pc, #328]	; (80019b4 <HAL_RCC_ClockConfig+0x1c4>)
 800186a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800186e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001870:	4b50      	ldr	r3, [pc, #320]	; (80019b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	494d      	ldr	r1, [pc, #308]	; (80019b4 <HAL_RCC_ClockConfig+0x1c4>)
 800187e:	4313      	orrs	r3, r2
 8001880:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	2b00      	cmp	r3, #0
 800188c:	d040      	beq.n	8001910 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d107      	bne.n	80018a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001896:	4b47      	ldr	r3, [pc, #284]	; (80019b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d115      	bne.n	80018ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e07f      	b.n	80019a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d107      	bne.n	80018be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018ae:	4b41      	ldr	r3, [pc, #260]	; (80019b4 <HAL_RCC_ClockConfig+0x1c4>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d109      	bne.n	80018ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e073      	b.n	80019a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018be:	4b3d      	ldr	r3, [pc, #244]	; (80019b4 <HAL_RCC_ClockConfig+0x1c4>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d101      	bne.n	80018ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e06b      	b.n	80019a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018ce:	4b39      	ldr	r3, [pc, #228]	; (80019b4 <HAL_RCC_ClockConfig+0x1c4>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f023 0203 	bic.w	r2, r3, #3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	4936      	ldr	r1, [pc, #216]	; (80019b4 <HAL_RCC_ClockConfig+0x1c4>)
 80018dc:	4313      	orrs	r3, r2
 80018de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018e0:	f7ff fa3e 	bl	8000d60 <HAL_GetTick>
 80018e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018e6:	e00a      	b.n	80018fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018e8:	f7ff fa3a 	bl	8000d60 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e053      	b.n	80019a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018fe:	4b2d      	ldr	r3, [pc, #180]	; (80019b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f003 020c 	and.w	r2, r3, #12
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	429a      	cmp	r2, r3
 800190e:	d1eb      	bne.n	80018e8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001910:	4b27      	ldr	r3, [pc, #156]	; (80019b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0307 	and.w	r3, r3, #7
 8001918:	683a      	ldr	r2, [r7, #0]
 800191a:	429a      	cmp	r2, r3
 800191c:	d210      	bcs.n	8001940 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800191e:	4b24      	ldr	r3, [pc, #144]	; (80019b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f023 0207 	bic.w	r2, r3, #7
 8001926:	4922      	ldr	r1, [pc, #136]	; (80019b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	4313      	orrs	r3, r2
 800192c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800192e:	4b20      	ldr	r3, [pc, #128]	; (80019b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0307 	and.w	r3, r3, #7
 8001936:	683a      	ldr	r2, [r7, #0]
 8001938:	429a      	cmp	r2, r3
 800193a:	d001      	beq.n	8001940 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e032      	b.n	80019a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0304 	and.w	r3, r3, #4
 8001948:	2b00      	cmp	r3, #0
 800194a:	d008      	beq.n	800195e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800194c:	4b19      	ldr	r3, [pc, #100]	; (80019b4 <HAL_RCC_ClockConfig+0x1c4>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	4916      	ldr	r1, [pc, #88]	; (80019b4 <HAL_RCC_ClockConfig+0x1c4>)
 800195a:	4313      	orrs	r3, r2
 800195c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0308 	and.w	r3, r3, #8
 8001966:	2b00      	cmp	r3, #0
 8001968:	d009      	beq.n	800197e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800196a:	4b12      	ldr	r3, [pc, #72]	; (80019b4 <HAL_RCC_ClockConfig+0x1c4>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	490e      	ldr	r1, [pc, #56]	; (80019b4 <HAL_RCC_ClockConfig+0x1c4>)
 800197a:	4313      	orrs	r3, r2
 800197c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800197e:	f000 f821 	bl	80019c4 <HAL_RCC_GetSysClockFreq>
 8001982:	4602      	mov	r2, r0
 8001984:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	091b      	lsrs	r3, r3, #4
 800198a:	f003 030f 	and.w	r3, r3, #15
 800198e:	490a      	ldr	r1, [pc, #40]	; (80019b8 <HAL_RCC_ClockConfig+0x1c8>)
 8001990:	5ccb      	ldrb	r3, [r1, r3]
 8001992:	fa22 f303 	lsr.w	r3, r2, r3
 8001996:	4a09      	ldr	r2, [pc, #36]	; (80019bc <HAL_RCC_ClockConfig+0x1cc>)
 8001998:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800199a:	4b09      	ldr	r3, [pc, #36]	; (80019c0 <HAL_RCC_ClockConfig+0x1d0>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff f99c 	bl	8000cdc <HAL_InitTick>

  return HAL_OK;
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	40022000 	.word	0x40022000
 80019b4:	40021000 	.word	0x40021000
 80019b8:	080022e8 	.word	0x080022e8
 80019bc:	2000001c 	.word	0x2000001c
 80019c0:	20000020 	.word	0x20000020

080019c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b087      	sub	sp, #28
 80019c8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80019ca:	2300      	movs	r3, #0
 80019cc:	60fb      	str	r3, [r7, #12]
 80019ce:	2300      	movs	r3, #0
 80019d0:	60bb      	str	r3, [r7, #8]
 80019d2:	2300      	movs	r3, #0
 80019d4:	617b      	str	r3, [r7, #20]
 80019d6:	2300      	movs	r3, #0
 80019d8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80019da:	2300      	movs	r3, #0
 80019dc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80019de:	4b1e      	ldr	r3, [pc, #120]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x94>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f003 030c 	and.w	r3, r3, #12
 80019ea:	2b04      	cmp	r3, #4
 80019ec:	d002      	beq.n	80019f4 <HAL_RCC_GetSysClockFreq+0x30>
 80019ee:	2b08      	cmp	r3, #8
 80019f0:	d003      	beq.n	80019fa <HAL_RCC_GetSysClockFreq+0x36>
 80019f2:	e027      	b.n	8001a44 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019f4:	4b19      	ldr	r3, [pc, #100]	; (8001a5c <HAL_RCC_GetSysClockFreq+0x98>)
 80019f6:	613b      	str	r3, [r7, #16]
      break;
 80019f8:	e027      	b.n	8001a4a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	0c9b      	lsrs	r3, r3, #18
 80019fe:	f003 030f 	and.w	r3, r3, #15
 8001a02:	4a17      	ldr	r2, [pc, #92]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001a04:	5cd3      	ldrb	r3, [r2, r3]
 8001a06:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d010      	beq.n	8001a34 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a12:	4b11      	ldr	r3, [pc, #68]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	0c5b      	lsrs	r3, r3, #17
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	4a11      	ldr	r2, [pc, #68]	; (8001a64 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a1e:	5cd3      	ldrb	r3, [r2, r3]
 8001a20:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a0d      	ldr	r2, [pc, #52]	; (8001a5c <HAL_RCC_GetSysClockFreq+0x98>)
 8001a26:	fb03 f202 	mul.w	r2, r3, r2
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a30:	617b      	str	r3, [r7, #20]
 8001a32:	e004      	b.n	8001a3e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4a0c      	ldr	r2, [pc, #48]	; (8001a68 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001a38:	fb02 f303 	mul.w	r3, r2, r3
 8001a3c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	613b      	str	r3, [r7, #16]
      break;
 8001a42:	e002      	b.n	8001a4a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a44:	4b05      	ldr	r3, [pc, #20]	; (8001a5c <HAL_RCC_GetSysClockFreq+0x98>)
 8001a46:	613b      	str	r3, [r7, #16]
      break;
 8001a48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a4a:	693b      	ldr	r3, [r7, #16]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	371c      	adds	r7, #28
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bc80      	pop	{r7}
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	007a1200 	.word	0x007a1200
 8001a60:	080022f8 	.word	0x080022f8
 8001a64:	08002308 	.word	0x08002308
 8001a68:	003d0900 	.word	0x003d0900

08001a6c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a74:	4b0a      	ldr	r3, [pc, #40]	; (8001aa0 <RCC_Delay+0x34>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a0a      	ldr	r2, [pc, #40]	; (8001aa4 <RCC_Delay+0x38>)
 8001a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a7e:	0a5b      	lsrs	r3, r3, #9
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	fb02 f303 	mul.w	r3, r2, r3
 8001a86:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a88:	bf00      	nop
  }
  while (Delay --);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	1e5a      	subs	r2, r3, #1
 8001a8e:	60fa      	str	r2, [r7, #12]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d1f9      	bne.n	8001a88 <RCC_Delay+0x1c>
}
 8001a94:	bf00      	nop
 8001a96:	bf00      	nop
 8001a98:	3714      	adds	r7, #20
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bc80      	pop	{r7}
 8001a9e:	4770      	bx	lr
 8001aa0:	2000001c 	.word	0x2000001c
 8001aa4:	10624dd3 	.word	0x10624dd3

08001aa8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d101      	bne.n	8001aba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e041      	b.n	8001b3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d106      	bne.n	8001ad4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f7ff f86c 	bl	8000bac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2202      	movs	r2, #2
 8001ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	3304      	adds	r3, #4
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4610      	mov	r0, r2
 8001ae8:	f000 fa6e 	bl	8001fc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2201      	movs	r2, #1
 8001af0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2201      	movs	r2, #1
 8001af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
	...

08001b48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d001      	beq.n	8001b60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e035      	b.n	8001bcc <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2202      	movs	r2, #2
 8001b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	68da      	ldr	r2, [r3, #12]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f042 0201 	orr.w	r2, r2, #1
 8001b76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a16      	ldr	r2, [pc, #88]	; (8001bd8 <HAL_TIM_Base_Start_IT+0x90>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d009      	beq.n	8001b96 <HAL_TIM_Base_Start_IT+0x4e>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b8a:	d004      	beq.n	8001b96 <HAL_TIM_Base_Start_IT+0x4e>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a12      	ldr	r2, [pc, #72]	; (8001bdc <HAL_TIM_Base_Start_IT+0x94>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d111      	bne.n	8001bba <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 0307 	and.w	r3, r3, #7
 8001ba0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2b06      	cmp	r3, #6
 8001ba6:	d010      	beq.n	8001bca <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f042 0201 	orr.w	r2, r2, #1
 8001bb6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bb8:	e007      	b.n	8001bca <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f042 0201 	orr.w	r2, r2, #1
 8001bc8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3714      	adds	r7, #20
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bc80      	pop	{r7}
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	40012c00 	.word	0x40012c00
 8001bdc:	40000400 	.word	0x40000400

08001be0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d122      	bne.n	8001c3c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	f003 0302 	and.w	r3, r3, #2
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d11b      	bne.n	8001c3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f06f 0202 	mvn.w	r2, #2
 8001c0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2201      	movs	r2, #1
 8001c12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	f003 0303 	and.w	r3, r3, #3
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d003      	beq.n	8001c2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 f9b4 	bl	8001f90 <HAL_TIM_IC_CaptureCallback>
 8001c28:	e005      	b.n	8001c36 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 f9a7 	bl	8001f7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f000 f9b6 	bl	8001fa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	f003 0304 	and.w	r3, r3, #4
 8001c46:	2b04      	cmp	r3, #4
 8001c48:	d122      	bne.n	8001c90 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	f003 0304 	and.w	r3, r3, #4
 8001c54:	2b04      	cmp	r3, #4
 8001c56:	d11b      	bne.n	8001c90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f06f 0204 	mvn.w	r2, #4
 8001c60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2202      	movs	r2, #2
 8001c66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	699b      	ldr	r3, [r3, #24]
 8001c6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d003      	beq.n	8001c7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f000 f98a 	bl	8001f90 <HAL_TIM_IC_CaptureCallback>
 8001c7c:	e005      	b.n	8001c8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 f97d 	bl	8001f7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f000 f98c 	bl	8001fa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	f003 0308 	and.w	r3, r3, #8
 8001c9a:	2b08      	cmp	r3, #8
 8001c9c:	d122      	bne.n	8001ce4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	f003 0308 	and.w	r3, r3, #8
 8001ca8:	2b08      	cmp	r3, #8
 8001caa:	d11b      	bne.n	8001ce4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f06f 0208 	mvn.w	r2, #8
 8001cb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2204      	movs	r2, #4
 8001cba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	69db      	ldr	r3, [r3, #28]
 8001cc2:	f003 0303 	and.w	r3, r3, #3
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d003      	beq.n	8001cd2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f000 f960 	bl	8001f90 <HAL_TIM_IC_CaptureCallback>
 8001cd0:	e005      	b.n	8001cde <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 f953 	bl	8001f7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f000 f962 	bl	8001fa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	f003 0310 	and.w	r3, r3, #16
 8001cee:	2b10      	cmp	r3, #16
 8001cf0:	d122      	bne.n	8001d38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	f003 0310 	and.w	r3, r3, #16
 8001cfc:	2b10      	cmp	r3, #16
 8001cfe:	d11b      	bne.n	8001d38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f06f 0210 	mvn.w	r2, #16
 8001d08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2208      	movs	r2, #8
 8001d0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	69db      	ldr	r3, [r3, #28]
 8001d16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d003      	beq.n	8001d26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 f936 	bl	8001f90 <HAL_TIM_IC_CaptureCallback>
 8001d24:	e005      	b.n	8001d32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 f929 	bl	8001f7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f000 f938 	bl	8001fa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d10e      	bne.n	8001d64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	f003 0301 	and.w	r3, r3, #1
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d107      	bne.n	8001d64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f06f 0201 	mvn.w	r2, #1
 8001d5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f7fe fb22 	bl	80003a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	691b      	ldr	r3, [r3, #16]
 8001d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d6e:	2b80      	cmp	r3, #128	; 0x80
 8001d70:	d10e      	bne.n	8001d90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d7c:	2b80      	cmp	r3, #128	; 0x80
 8001d7e:	d107      	bne.n	8001d90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 fa6b 	bl	8002266 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d9a:	2b40      	cmp	r3, #64	; 0x40
 8001d9c:	d10e      	bne.n	8001dbc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001da8:	2b40      	cmp	r3, #64	; 0x40
 8001daa:	d107      	bne.n	8001dbc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001db4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 f8fc 	bl	8001fb4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	f003 0320 	and.w	r3, r3, #32
 8001dc6:	2b20      	cmp	r3, #32
 8001dc8:	d10e      	bne.n	8001de8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	f003 0320 	and.w	r3, r3, #32
 8001dd4:	2b20      	cmp	r3, #32
 8001dd6:	d107      	bne.n	8001de8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f06f 0220 	mvn.w	r2, #32
 8001de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 fa36 	bl	8002254 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001de8:	bf00      	nop
 8001dea:	3708      	adds	r7, #8
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d101      	bne.n	8001e0c <HAL_TIM_ConfigClockSource+0x1c>
 8001e08:	2302      	movs	r3, #2
 8001e0a:	e0b4      	b.n	8001f76 <HAL_TIM_ConfigClockSource+0x186>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2202      	movs	r2, #2
 8001e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001e2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	68ba      	ldr	r2, [r7, #8]
 8001e3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e44:	d03e      	beq.n	8001ec4 <HAL_TIM_ConfigClockSource+0xd4>
 8001e46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e4a:	f200 8087 	bhi.w	8001f5c <HAL_TIM_ConfigClockSource+0x16c>
 8001e4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e52:	f000 8086 	beq.w	8001f62 <HAL_TIM_ConfigClockSource+0x172>
 8001e56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e5a:	d87f      	bhi.n	8001f5c <HAL_TIM_ConfigClockSource+0x16c>
 8001e5c:	2b70      	cmp	r3, #112	; 0x70
 8001e5e:	d01a      	beq.n	8001e96 <HAL_TIM_ConfigClockSource+0xa6>
 8001e60:	2b70      	cmp	r3, #112	; 0x70
 8001e62:	d87b      	bhi.n	8001f5c <HAL_TIM_ConfigClockSource+0x16c>
 8001e64:	2b60      	cmp	r3, #96	; 0x60
 8001e66:	d050      	beq.n	8001f0a <HAL_TIM_ConfigClockSource+0x11a>
 8001e68:	2b60      	cmp	r3, #96	; 0x60
 8001e6a:	d877      	bhi.n	8001f5c <HAL_TIM_ConfigClockSource+0x16c>
 8001e6c:	2b50      	cmp	r3, #80	; 0x50
 8001e6e:	d03c      	beq.n	8001eea <HAL_TIM_ConfigClockSource+0xfa>
 8001e70:	2b50      	cmp	r3, #80	; 0x50
 8001e72:	d873      	bhi.n	8001f5c <HAL_TIM_ConfigClockSource+0x16c>
 8001e74:	2b40      	cmp	r3, #64	; 0x40
 8001e76:	d058      	beq.n	8001f2a <HAL_TIM_ConfigClockSource+0x13a>
 8001e78:	2b40      	cmp	r3, #64	; 0x40
 8001e7a:	d86f      	bhi.n	8001f5c <HAL_TIM_ConfigClockSource+0x16c>
 8001e7c:	2b30      	cmp	r3, #48	; 0x30
 8001e7e:	d064      	beq.n	8001f4a <HAL_TIM_ConfigClockSource+0x15a>
 8001e80:	2b30      	cmp	r3, #48	; 0x30
 8001e82:	d86b      	bhi.n	8001f5c <HAL_TIM_ConfigClockSource+0x16c>
 8001e84:	2b20      	cmp	r3, #32
 8001e86:	d060      	beq.n	8001f4a <HAL_TIM_ConfigClockSource+0x15a>
 8001e88:	2b20      	cmp	r3, #32
 8001e8a:	d867      	bhi.n	8001f5c <HAL_TIM_ConfigClockSource+0x16c>
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d05c      	beq.n	8001f4a <HAL_TIM_ConfigClockSource+0x15a>
 8001e90:	2b10      	cmp	r3, #16
 8001e92:	d05a      	beq.n	8001f4a <HAL_TIM_ConfigClockSource+0x15a>
 8001e94:	e062      	b.n	8001f5c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001ea6:	f000 f95e 	bl	8002166 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001eb8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	68ba      	ldr	r2, [r7, #8]
 8001ec0:	609a      	str	r2, [r3, #8]
      break;
 8001ec2:	e04f      	b.n	8001f64 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001ed4:	f000 f947 	bl	8002166 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	689a      	ldr	r2, [r3, #8]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ee6:	609a      	str	r2, [r3, #8]
      break;
 8001ee8:	e03c      	b.n	8001f64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	f000 f8be 	bl	8002078 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2150      	movs	r1, #80	; 0x50
 8001f02:	4618      	mov	r0, r3
 8001f04:	f000 f915 	bl	8002132 <TIM_ITRx_SetConfig>
      break;
 8001f08:	e02c      	b.n	8001f64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f16:	461a      	mov	r2, r3
 8001f18:	f000 f8dc 	bl	80020d4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2160      	movs	r1, #96	; 0x60
 8001f22:	4618      	mov	r0, r3
 8001f24:	f000 f905 	bl	8002132 <TIM_ITRx_SetConfig>
      break;
 8001f28:	e01c      	b.n	8001f64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f36:	461a      	mov	r2, r3
 8001f38:	f000 f89e 	bl	8002078 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2140      	movs	r1, #64	; 0x40
 8001f42:	4618      	mov	r0, r3
 8001f44:	f000 f8f5 	bl	8002132 <TIM_ITRx_SetConfig>
      break;
 8001f48:	e00c      	b.n	8001f64 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4619      	mov	r1, r3
 8001f54:	4610      	mov	r0, r2
 8001f56:	f000 f8ec 	bl	8002132 <TIM_ITRx_SetConfig>
      break;
 8001f5a:	e003      	b.n	8001f64 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	73fb      	strb	r3, [r7, #15]
      break;
 8001f60:	e000      	b.n	8001f64 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001f62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	b083      	sub	sp, #12
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f86:	bf00      	nop
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bc80      	pop	{r7}
 8001f8e:	4770      	bx	lr

08001f90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bc80      	pop	{r7}
 8001fa0:	4770      	bx	lr

08001fa2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	b083      	sub	sp, #12
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bc80      	pop	{r7}
 8001fb2:	4770      	bx	lr

08001fb4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bc80      	pop	{r7}
 8001fc4:	4770      	bx	lr
	...

08001fc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a25      	ldr	r2, [pc, #148]	; (8002070 <TIM_Base_SetConfig+0xa8>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d007      	beq.n	8001ff0 <TIM_Base_SetConfig+0x28>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fe6:	d003      	beq.n	8001ff0 <TIM_Base_SetConfig+0x28>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a22      	ldr	r2, [pc, #136]	; (8002074 <TIM_Base_SetConfig+0xac>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d108      	bne.n	8002002 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ff6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	68fa      	ldr	r2, [r7, #12]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a1a      	ldr	r2, [pc, #104]	; (8002070 <TIM_Base_SetConfig+0xa8>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d007      	beq.n	800201a <TIM_Base_SetConfig+0x52>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002010:	d003      	beq.n	800201a <TIM_Base_SetConfig+0x52>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a17      	ldr	r2, [pc, #92]	; (8002074 <TIM_Base_SetConfig+0xac>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d108      	bne.n	800202c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002020:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	68fa      	ldr	r2, [r7, #12]
 8002028:	4313      	orrs	r3, r2
 800202a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	4313      	orrs	r3, r2
 8002038:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	68fa      	ldr	r2, [r7, #12]
 800203e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	689a      	ldr	r2, [r3, #8]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a07      	ldr	r2, [pc, #28]	; (8002070 <TIM_Base_SetConfig+0xa8>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d103      	bne.n	8002060 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	691a      	ldr	r2, [r3, #16]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	615a      	str	r2, [r3, #20]
}
 8002066:	bf00      	nop
 8002068:	3714      	adds	r7, #20
 800206a:	46bd      	mov	sp, r7
 800206c:	bc80      	pop	{r7}
 800206e:	4770      	bx	lr
 8002070:	40012c00 	.word	0x40012c00
 8002074:	40000400 	.word	0x40000400

08002078 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002078:	b480      	push	{r7}
 800207a:	b087      	sub	sp, #28
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	6a1b      	ldr	r3, [r3, #32]
 8002088:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6a1b      	ldr	r3, [r3, #32]
 800208e:	f023 0201 	bic.w	r2, r3, #1
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	011b      	lsls	r3, r3, #4
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	f023 030a 	bic.w	r3, r3, #10
 80020b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	697a      	ldr	r2, [r7, #20]
 80020c8:	621a      	str	r2, [r3, #32]
}
 80020ca:	bf00      	nop
 80020cc:	371c      	adds	r7, #28
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bc80      	pop	{r7}
 80020d2:	4770      	bx	lr

080020d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b087      	sub	sp, #28
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6a1b      	ldr	r3, [r3, #32]
 80020e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6a1b      	ldr	r3, [r3, #32]
 80020ea:	f023 0210 	bic.w	r2, r3, #16
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	699b      	ldr	r3, [r3, #24]
 80020f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80020fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	031b      	lsls	r3, r3, #12
 8002104:	693a      	ldr	r2, [r7, #16]
 8002106:	4313      	orrs	r3, r2
 8002108:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002110:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	011b      	lsls	r3, r3, #4
 8002116:	697a      	ldr	r2, [r7, #20]
 8002118:	4313      	orrs	r3, r2
 800211a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	697a      	ldr	r2, [r7, #20]
 8002126:	621a      	str	r2, [r3, #32]
}
 8002128:	bf00      	nop
 800212a:	371c      	adds	r7, #28
 800212c:	46bd      	mov	sp, r7
 800212e:	bc80      	pop	{r7}
 8002130:	4770      	bx	lr

08002132 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002132:	b480      	push	{r7}
 8002134:	b085      	sub	sp, #20
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
 800213a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002148:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	4313      	orrs	r3, r2
 8002150:	f043 0307 	orr.w	r3, r3, #7
 8002154:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	68fa      	ldr	r2, [r7, #12]
 800215a:	609a      	str	r2, [r3, #8]
}
 800215c:	bf00      	nop
 800215e:	3714      	adds	r7, #20
 8002160:	46bd      	mov	sp, r7
 8002162:	bc80      	pop	{r7}
 8002164:	4770      	bx	lr

08002166 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002166:	b480      	push	{r7}
 8002168:	b087      	sub	sp, #28
 800216a:	af00      	add	r7, sp, #0
 800216c:	60f8      	str	r0, [r7, #12]
 800216e:	60b9      	str	r1, [r7, #8]
 8002170:	607a      	str	r2, [r7, #4]
 8002172:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002180:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	021a      	lsls	r2, r3, #8
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	431a      	orrs	r2, r3
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	4313      	orrs	r3, r2
 800218e:	697a      	ldr	r2, [r7, #20]
 8002190:	4313      	orrs	r3, r2
 8002192:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	697a      	ldr	r2, [r7, #20]
 8002198:	609a      	str	r2, [r3, #8]
}
 800219a:	bf00      	nop
 800219c:	371c      	adds	r7, #28
 800219e:	46bd      	mov	sp, r7
 80021a0:	bc80      	pop	{r7}
 80021a2:	4770      	bx	lr

080021a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d101      	bne.n	80021bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80021b8:	2302      	movs	r3, #2
 80021ba:	e041      	b.n	8002240 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2202      	movs	r2, #2
 80021c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a14      	ldr	r2, [pc, #80]	; (800224c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d009      	beq.n	8002214 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002208:	d004      	beq.n	8002214 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a10      	ldr	r2, [pc, #64]	; (8002250 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d10c      	bne.n	800222e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800221a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	68ba      	ldr	r2, [r7, #8]
 8002222:	4313      	orrs	r3, r2
 8002224:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68ba      	ldr	r2, [r7, #8]
 800222c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2201      	movs	r2, #1
 8002232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	3714      	adds	r7, #20
 8002244:	46bd      	mov	sp, r7
 8002246:	bc80      	pop	{r7}
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	40012c00 	.word	0x40012c00
 8002250:	40000400 	.word	0x40000400

08002254 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	bc80      	pop	{r7}
 8002264:	4770      	bx	lr

08002266 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002266:	b480      	push	{r7}
 8002268:	b083      	sub	sp, #12
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800226e:	bf00      	nop
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	bc80      	pop	{r7}
 8002276:	4770      	bx	lr

08002278 <memset>:
 8002278:	4603      	mov	r3, r0
 800227a:	4402      	add	r2, r0
 800227c:	4293      	cmp	r3, r2
 800227e:	d100      	bne.n	8002282 <memset+0xa>
 8002280:	4770      	bx	lr
 8002282:	f803 1b01 	strb.w	r1, [r3], #1
 8002286:	e7f9      	b.n	800227c <memset+0x4>

08002288 <__libc_init_array>:
 8002288:	b570      	push	{r4, r5, r6, lr}
 800228a:	2600      	movs	r6, #0
 800228c:	4d0c      	ldr	r5, [pc, #48]	; (80022c0 <__libc_init_array+0x38>)
 800228e:	4c0d      	ldr	r4, [pc, #52]	; (80022c4 <__libc_init_array+0x3c>)
 8002290:	1b64      	subs	r4, r4, r5
 8002292:	10a4      	asrs	r4, r4, #2
 8002294:	42a6      	cmp	r6, r4
 8002296:	d109      	bne.n	80022ac <__libc_init_array+0x24>
 8002298:	f000 f81a 	bl	80022d0 <_init>
 800229c:	2600      	movs	r6, #0
 800229e:	4d0a      	ldr	r5, [pc, #40]	; (80022c8 <__libc_init_array+0x40>)
 80022a0:	4c0a      	ldr	r4, [pc, #40]	; (80022cc <__libc_init_array+0x44>)
 80022a2:	1b64      	subs	r4, r4, r5
 80022a4:	10a4      	asrs	r4, r4, #2
 80022a6:	42a6      	cmp	r6, r4
 80022a8:	d105      	bne.n	80022b6 <__libc_init_array+0x2e>
 80022aa:	bd70      	pop	{r4, r5, r6, pc}
 80022ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80022b0:	4798      	blx	r3
 80022b2:	3601      	adds	r6, #1
 80022b4:	e7ee      	b.n	8002294 <__libc_init_array+0xc>
 80022b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80022ba:	4798      	blx	r3
 80022bc:	3601      	adds	r6, #1
 80022be:	e7f2      	b.n	80022a6 <__libc_init_array+0x1e>
 80022c0:	0800230c 	.word	0x0800230c
 80022c4:	0800230c 	.word	0x0800230c
 80022c8:	0800230c 	.word	0x0800230c
 80022cc:	08002310 	.word	0x08002310

080022d0 <_init>:
 80022d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022d2:	bf00      	nop
 80022d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022d6:	bc08      	pop	{r3}
 80022d8:	469e      	mov	lr, r3
 80022da:	4770      	bx	lr

080022dc <_fini>:
 80022dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022de:	bf00      	nop
 80022e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022e2:	bc08      	pop	{r3}
 80022e4:	469e      	mov	lr, r3
 80022e6:	4770      	bx	lr
